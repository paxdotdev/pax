<% if args_full_component.as_ref().is_some() && args_full_component.as_ref().unwrap().is_main_component  { %>
    // For the main (application-root) component only, a `main` is generated for the `parser` bin target.
    // This method bootstraps the parsing process, parsing not only the main/application-root component
    // but every component/primitive found in its extended render tree. This main method
    // also returns the parsed, serialized PaxManifest via stdio (println)
    #[cfg(feature = "parser")]
    pub fn main() {
        let mut ctx = <%= engine_import_path %>::pax_manifest::parsing::ParsingContext::default();

        <%= engine_import_path %>::api::Functions::register_all_functions();

        ctx.main_component_type_id = <<%= pascal_identifier %> as <%= engine_import_path %>::pax_manifest::parsing::Reflectable>::get_type_id();
        let (mut ctx, _) = <<%= pascal_identifier %> as <%= engine_import_path %>::pax_manifest::parsing::Reflectable>::parse_to_manifest(ctx);

        let userland_manifest = <%= engine_import_path %>::pax_manifest::PaxManifest {
            components: ctx.component_definitions,
            main_component_type_id: ctx.main_component_type_id,
            type_table: ctx.type_table,
            assets_dirs: ctx.assets_dirs,
            engine_import_path: "<%= engine_import_path %>".to_string(),
            project_files: vec![],
        };

        <% if is_root_crate { %>
            #[cfg(any(feature = "designer", feature = "designtime"))]
            {
                let mut ctx = <%= engine_import_path %>::pax_manifest::parsing::ParsingContext::default();
                ctx.main_component_type_id = <%= engine_import_path %>::pax_manifest::TypeId::build_singleton("pax_designer::PaxDesigner", Some("PaxDesigner"));
                let (mut ctx, _) = <pax_designer::PaxDesigner as <%= engine_import_path %>::pax_manifest::parsing::Reflectable>::parse_to_manifest(ctx);

                let designer_manifest = <%= engine_import_path %>::pax_manifest::PaxManifest {
                    components: ctx.component_definitions,
                    main_component_type_id: ctx.main_component_type_id,
                    type_table: ctx.type_table,
                    assets_dirs: ctx.assets_dirs,
                    engine_import_path: "<%= engine_import_path %>".to_string(),
                    project_files: vec![],
                };

                //Send data back to parent process by printing to stdout
                //Note presence of second manifest when designtime (manifest for PaxDesigner)
                println!("{}", &<%= engine_import_path %>::serde_json::to_string_pretty(&vec![userland_manifest, designer_manifest]).unwrap());
            }

            #[cfg(not(any(feature = "designer", feature = "designtime")))]<% } %>
            println!("{}", &<%= engine_import_path %>::serde_json::to_string_pretty(&vec![userland_manifest]).unwrap());
            std::process::exit(0);

    }

    <% if is_root_crate { %>
        //For main+root component only, include cartridge snippet and manifest JSON
        <%= args_full_component.as_ref().unwrap().cartridge_snippet %>
    <% } %>

    //Platform-specific mount logic for #[main] component
    #[cfg(feature = "web")]
    use <%= engine_import_path %>::wasm_bindgen::prelude::*;
    #[cfg(feature = "web")]
    use <%= engine_import_path %>::wasm_bindgen_futures;
    #[cfg(feature = "web")]
    #[wasm_bindgen]
    pub async fn pax_init() -> JsValue {
        std::panic::set_hook(Box::new(<%= engine_import_path %>::pax_chassis_web::console_error_panic_hook::hook));
        // setup logging
        #[cfg(debug_assertions)]
        <%= engine_import_path %>::pax_chassis_web::console_log::init_with_level(<%= engine_import_path %>::log::Level::Debug)
            .expect("console_log::init_with_level initialized correctly");
        #[cfg(not(debug_assertions))]
        <%= engine_import_path %>::pax_chassis_web::console_log::init_with_level(<%= engine_import_path %>::log::Level::Error)
            .expect("console_log::init_with_level initialized correctly");



        #[cfg(not(any(feature = "designer", feature = "designtime")))]
        {
            let manifest = init_manifest();
            let definition_to_instance_traverser = init_definition_to_instance_traverser(manifest);
            JsValue::from(<%= engine_import_path %>::pax_chassis_web::PaxChassisWeb::new(definition_to_instance_traverser).await)
        }

        #[cfg(any(feature = "designer", feature = "designtime"))]
        {
            let userland_manifest = init_manifest();
            let userland_definition_to_instance_traverser = init_definition_to_instance_traverser(userland_manifest);

            let designer_manifest = init_designer_manifest();
            let designer_definition_to_instance_traverser = init_definition_to_instance_traverser(designer_manifest);

            JsValue::from(<%= engine_import_path %>::pax_chassis_web::PaxChassisWeb::new(userland_definition_to_instance_traverser, designer_definition_to_instance_traverser).await)
        }

    }

    //cdylib exports
    #[cfg(feature = "web")]
    pub use <%= engine_import_path %>::pax_chassis_web::*;

    #[cfg(any(feature = "macos", feature="ios"))]
    #[no_mangle]
    pub extern "C" fn pax_init() -> *mut <%= engine_import_path %>::pax_chassis_common::core_graphics_c_bridge::PaxEngineContainer {
        <%= engine_import_path %>::pax_chassis_common::env_logger::init();

        let manifest = init_manifest();
        let definition_to_instance_traverser = init_definition_to_instance_traverser(manifest);

        let main_component_instance = definition_to_instance_traverser.get_main_component();

        //Initialize a ManuallyDrop-contained PaxEngine, so that a pointer to that
        //engine can be passed back to Swift via the C (FFI) bridge
        //This could presumably be cleaned up -- see `pax_dealloc_engine`
        let engine: std::mem::ManuallyDrop<Box<<%= engine_import_path %>::pax_runtime::engine::PaxEngine>> = std::mem::ManuallyDrop::new(Box::new(<%= engine_import_path %>::pax_runtime::engine::PaxEngine::new(
            main_component_instance,
            (1.0, 1.0),
            Platform::Native,
            #[cfg(feature="macos")]
            OS::Mac,
            #[cfg(feature="ios")]
            OS::IPhone,
        )));

        let container = std::mem::ManuallyDrop::new(Box::new(<%= engine_import_path %>::pax_chassis_common::core_graphics_c_bridge::PaxEngineContainer {
            _engine: Box::into_raw(std::mem::ManuallyDrop::into_inner(engine)),
        }));

        Box::into_raw(std::mem::ManuallyDrop::into_inner(container))
    }

    //cdylib exports
    #[cfg(any(feature = "macos", feature="ios"))]
    pub use <%= engine_import_path %>::pax_chassis_common::*;

<% } %>

<% if !is_custom_interpolatable { %>
    impl <%= engine_import_path %>::api::Interpolatable for <%= pascal_identifier %> {}
<% } %>

#[cfg(feature = "parser")]
impl <%= engine_import_path %>::pax_manifest::parsing::Reflectable for <%= pascal_identifier %> {

    fn get_self_pascal_identifier() -> String {
        "<%= pascal_identifier %>".to_string()
    }

    fn get_import_path() -> String {
        let PASCAL_IDENTIFIER  = <%= pascal_identifier %>::get_self_pascal_identifier();
        let chopped_type = {
            if PASCAL_IDENTIFIER.contains("::") {
                PASCAL_IDENTIFIER.split("::").last().unwrap().to_string()
            } else {
                PASCAL_IDENTIFIER
            }
        };
        <%= engine_import_path %>::pax_manifest::parsing::clean_module_path(module_path!()) + "::" + &chopped_type
    }

    fn get_type_id() -> <%= engine_import_path %>::pax_manifest::TypeId {
       <%= engine_import_path %>::pax_manifest::TypeId::build_singleton(&Self::get_import_path(), Some(&Self::get_self_pascal_identifier()))
    }

    fn parse_to_manifest(mut ctx: <%= engine_import_path %>::pax_manifest::parsing::ParsingContext) -> (<%= engine_import_path %>::pax_manifest::parsing::ParsingContext, Vec<<%= engine_import_path %>::pax_manifest::PropertyDefinition>) {
         <% if args_full_component.as_ref().is_some() { %>
            <% if args_full_component.as_ref().unwrap().error_message.is_some() { %>
                //Error message for main component
                let error_message = "<%= args_full_component.as_ref().unwrap().error_message.as_ref().unwrap() %>";
                eprintln!("{}", error_message);
                std::process::exit(1);
            <% } %>
        <% } %>



        <% if args_full_component.as_ref().is_some() && args_full_component.as_ref().unwrap().is_main_component { %>
            let crate_root = std::path::PathBuf::from(r"<%= cargo_dir %>");
            let assets_dir = crate_root.join("assets");

            match assets_dir.canonicalize() {
                Ok(canonicalized_dir) => {
                    match canonicalized_dir.to_str() {
                        Some(dir_str) => {
                            ctx.assets_dirs.push(dir_str.to_string());
                        }
                        _ => {}, //silently fail
                    }
                }
                _ => {} //silently fail
            }

        <% } %>


        let self_type_id = <%= pascal_identifier %>::get_type_id();
        let mut property_definitions : Vec<<%= engine_import_path %>::pax_manifest::PropertyDefinition> = vec![];

        // Populate `PropertyDefinition`s
        <% if let InternalDefinitions::Struct(static_property_definitions) = &internal_definitions { %>
            <% for spd in static_property_definitions { %>

                //Special-handle the root scoped_resolvable_type (the one whose properties
                //must be available as nested symbols in PAXEL, like `foo.bar`).
                let (mut ctx, mut sub_property_definitions) = <%= spd.root_scoped_resolvable_type %>::parse_to_manifest(ctx);

                <% for scoped_resolvable_type in &spd.scoped_resolvable_types { %>

                    //Parse each scoped resolvable type, but no need to track the child property_definitions like we did for the root scoped resolvable type
                    < <%= scoped_resolvable_type %> as <%= engine_import_path %>::api::HelperFunctions>::register_all_functions();
                    let (mut ctx, _) = <%= scoped_resolvable_type %>::parse_to_manifest(ctx);
                <% } %>

                let property_type_id = <%= spd.root_scoped_resolvable_type %>::get_type_id();

                let mut flags = <%= engine_import_path %>::pax_manifest::PropertyDefinitionFlags::default();
                flags.is_property_wrapped = <%= spd.is_property_wrapped %>;
                flags.is_enum = <%= spd.is_enum %>;
                property_definitions.push(<%= engine_import_path %>::pax_manifest::PropertyDefinition {
                    name: "<%= spd.field_name %>".to_string(),
                    type_id: property_type_id,
                    flags,
                });
            <% } %>
        <% } %>

        <% if let InternalDefinitions::Enum(variant_definitions) = &internal_definitions { %>
            <% for vd in variant_definitions { %>
                <% for spd in &vd.variant_fields { %>
                    let (mut ctx, mut sub_property_definitions) = <%= spd.root_scoped_resolvable_type %>::parse_to_manifest(ctx);
                    <% for scoped_resolvable_type in &spd.scoped_resolvable_types { %>
                        let (mut ctx, _) = <%= scoped_resolvable_type %>::parse_to_manifest(ctx);
                    <% } %>
                <% } %>
            <% } %>
        <% } %>

        match &ctx.visited_type_ids.get(&self_type_id) {
            None => {
                //First time visiting this file/source

                <% if args_full_component.as_ref().is_some() { %>
                    <% for dep in args_full_component.as_ref().unwrap().template_dependencies.clone() { %>
                    let (mut ctx, _properties) = <%= dep %>::parse_to_manifest(ctx);
                    let dep_type_id = <%= dep %>::get_type_id();
                    ctx.template_map.insert("<%= dep %>".into(), dep_type_id);
                    <% } %>
                    //FUTURE: mitigate injection risk here -- notable risk if dealing with untrusted input.  A mitigation may be to sanitize/validate/parse `raw_pax` before templating.
                    const raw_pax: &str = r#####"
                        <%= args_full_component.as_ref().unwrap().raw_pax %>
                    "#####;
                <% } %>

                ctx.visited_type_ids.insert(self_type_id.clone().into());

                let PASCAL_IDENTIFIER = "<%= pascal_identifier %>";
                let import_path = <%= pascal_identifier %>::get_import_path();

                let (mut ctx, self_type_definition) =  <%= engine_import_path %>::pax_manifest::parsing::assemble_type_definition(
                    ctx,
                    property_definitions.clone(),
                    None,
                    self_type_id.clone(),
                );

                <% if args_full_component.as_ref().is_some() { %>
                    // Get source file path for write-back
                    let mut component_source_file_path = file!().to_string();
                    <% if args_full_component.as_ref().unwrap().associated_pax_file_path.is_some() { %>
                        component_source_file_path = r"<%= args_full_component.as_ref().unwrap().associated_pax_file_path.as_ref().unwrap() %>".to_string();
                    <% } %>   

                    let template_map = ctx.template_map.clone();
                    let (mut ctx, comp_def) =
                        <%= engine_import_path %>::pax_manifest::parsing::assemble_component_definition(
                            ctx,
                            &raw_pax,
                            <%= args_full_component.as_ref().unwrap().is_main_component %>,
                            template_map,
                            &<%= engine_import_path %>::pax_manifest::parsing::clean_module_path(module_path!()),
                            self_type_id.clone(),
                            &component_source_file_path,
                        );
                <% } %>
                <% if args_struct_only_component.as_ref().is_some() { %>
                    let (mut ctx, comp_def) =
                        <%= engine_import_path %>::pax_manifest::parsing::assemble_struct_only_component_definition(
                            ctx,
                            &<%= engine_import_path %>::pax_manifest::parsing::clean_module_path(module_path!()),
                            self_type_id.clone(),
                        );
                <% } %>
                <% if args_primitive.as_ref().is_some() { %>
                    let comp_def = <%= engine_import_path %>::pax_manifest::parsing::assemble_primitive_definition(
                        &<%= engine_import_path %>::pax_manifest::parsing::clean_module_path(module_path!()),
                        "<%=  args_primitive.as_ref().unwrap().primitive_instance_import_path  %>".to_string(),
                        self_type_id.clone(),
                    );
                <% } %>

                ctx.component_definitions
                    .insert(self_type_id.clone(), comp_def);

                (ctx, property_definitions)
            },
            _ => (ctx, property_definitions), //early return; this file has already been parsed
        }
    }

}

impl <%= engine_import_path %>::api::CoercionRules for <%= pascal_identifier %> {
    fn try_coerce(value: <%= engine_import_path %>::PaxValue) -> Result<Self, String> {
            <% if let InternalDefinitions::Enum(variant_definitions) = &internal_definitions { %>
                match value {
                    <%= engine_import_path %>::PaxValue::Enum(contents) => {
                        let (_, variant_name, values) = *contents;
                        match variant_name.as_str() {
                            <% for vd in variant_definitions { %>
                                "<%= vd.variant_name %>" => {
                                    let mut values = values.into_iter();
                                    Ok(Self::<%= vd.variant_name %>
                                    <% if vd.variant_fields.len() > 0 { %>
                                    (
                                        <% for spd in &vd.variant_fields { %>
                                            <<%=spd.root_scoped_resolvable_type%> as <%= engine_import_path %>::api::CoercionRules>::try_coerce(values.next().unwrap().clone())?,
                                        <% } %>
                                    )
                                    <% } %>
                                    )
                                },
                            <% } %>
                            _ => Err(format!("Invalid variant name: {}", variant_name).to_string()),
                        }
                    },
                    _ => Err(format!("Expected Enum for <%= pascal_identifier %> but got {:?}", value).to_string()),
                }
            <% } else if let InternalDefinitions::Struct(static_property_definitions) = &internal_definitions { %>
                match value {
                    <%= engine_import_path %>::PaxValue::Object(map) => {
                        let mut map = map;
                        let mut ret = Self::default();
                        <% for spd in static_property_definitions { %>
                            // check if the map contains the field
                            if let Some(value) = map.iter().find_map(|(n, v)| (n == "<%= spd.field_name %>").then_some(v)) {
                                let value = <<%=spd.root_scoped_resolvable_type%> as <%= engine_import_path %>::api::CoercionRules>::try_coerce(value.clone())?;
                                // if property wrapped set it to Property::new(value)
                                <% if spd.is_property_wrapped { %>
                                    ret.<%= spd.field_name %> = Property::new(value);
                                <% } else { %>
                                    ret.<%= spd.field_name %> = value;
                                <% } %>
                            }
                        <% } %>
                        Ok(ret)
                    },
                    _ => Err(format!("Expected Object for <%= pascal_identifier %> but got {:?}", value).to_string()),
                }
            <% } %>
    }
}

impl <%= engine_import_path %>::api::ToPaxValue for <%= pascal_identifier %> {
    fn to_pax_value(self) -> <%= engine_import_path %>::PaxValue {
         <% if let InternalDefinitions::Enum(variant_definitions) = &internal_definitions { %>
                match self {
                    <% for vd in variant_definitions { %>
                        Self::<%= vd.variant_name %>
                        <% if vd.variant_fields.len() > 0 { %>
                        (
                            <% for spd in &vd.variant_fields { %>
                                <%= spd.field_name %>,
                            <% } %>
                        )
                        <% } %> => {
                            <%= engine_import_path %>::PaxValue::Enum(Box::new((
                                "<%= pascal_identifier %>".to_string(),
                                "<%= vd.variant_name %>".to_string(),
                                vec![
                                    <% for spd in &vd.variant_fields { %>
                                        <<%=spd.root_scoped_resolvable_type%> as <%= engine_import_path %>::api::ToPaxValue>::to_pax_value(<%= spd.field_name %>),
                                    <% } %>
                                ].into_iter().collect()
                            )))
                        },
                    <% } %>
                }

            <% } else if let InternalDefinitions::Struct(static_property_definitions) = &internal_definitions { %>
                <%= engine_import_path %>::PaxValue::Object(
                    vec![
                        <% for spd in static_property_definitions { %>
                            <% if spd.is_property_wrapped { %>
                                ("<%= spd.field_name %>".to_string(), <<%=spd.root_scoped_resolvable_type%> as <%= engine_import_path %>::api::ToPaxValue>::to_pax_value(self.<%= spd.field_name %>.get())),
                            <% } else { %>
                                ("<%= spd.field_name %>".to_string(), <<%=spd.root_scoped_resolvable_type%> as <%= engine_import_path %>::api::ToPaxValue>::to_pax_value(self.<%= spd.field_name %>)),
                            <% } %>
                        <% } %>
                    ]
                )
            <% } %>
    }
}
