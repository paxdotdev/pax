//Following is the macro expansion of: #[pax_primitive("./pax-std-primitives", crate::<%= pascal_identifier %>Instance)]
<%= original_tokens %>
#[cfg(feature = "parser")]
impl <%= pascal_identifier %> {
    pub fn parse_to_manifest(mut ctx: pax_compiler::parsing::ParsingContext) -> (pax_compiler::parsing::ParsingContext, String) {
        let source_id = "primitive::<%= pascal_identifier %>";
        match ctx.visited_source_ids.get(&source_id as &str) {
            None => {
                //First time visiting this file/source â€” parse the relevant contents
                //then recurse through child nodes, unrolled here in the macro as
                //parsed from the template
                ctx.visited_source_ids.insert(source_id.to_string());
                let PASCAL_IDENTIFIER = "<%= pascal_identifier %>";
                ctx.template_map.insert(PASCAL_IDENTIFIER.to_string(), source_id.to_string());
                let template_map= ctx.template_map.clone();

                let mut property_definitions = vec![];

                // Populate `PropertyDefinition`s
                <% for ctpd in compile_time_property_definitions { %>
                    //Here we bridge from pure static analysis into some dynamic analysis via `parser`, in order
                    //to fully qualify module paths for scoped atomic types.

                    //For each compile-time property definition, populate a full (parse-time) PropertyDefinition:
                    //1. name | from template args
                    //2. (full original type: punt) | from template args (via macro)
                    //3. unique, fully qualified dependencies (HashSet, perhaps) | AT PARSE-TIME: from imperative calls to `get_fully_qualified_path`
                    //4. (default value?  punt)


                    let mut fully_qualified_constituent_types = vec![];
                    let mut dep_to_fqd_map = std::collections::HashMap::new();
                    <% for scoped_resolvable_type in ctpd.scoped_resolvable_types { %>
                        let fqd = <%= scoped_resolvable_type %>::get_fully_qualified_path("<%= scoped_resolvable_type %>");
                        dep_to_fqd_map.insert("<%= scoped_resolvable_type %>",fqd.clone());

                        fully_qualified_constituent_types.push(
                            fqd
                        );
                    <% } %>

                    let property_type_info =  pax_compiler::reflection::expand_fully_qualified_type_and_pascalize("<%= ctpd.original_type %>", &dep_to_fqd_map);

                    property_definitions.push(pax_compiler::manifest::PropertyDefinition {
                        name: "<%= ctpd.field_name %>".to_string(),
                        original_type: "<%= ctpd.original_type %>".to_string(),
                        fully_qualified_constituent_types,
                        property_type_info,
                        is_repeat_elem: false,
                        is_repeat_i: false,
                    });
                <% } %>
                ctx.all_property_definitions.insert(source_id.to_string(), property_definitions.clone());

                let comp_def = pax_compiler::parsing::assemble_primitive_definition(PASCAL_IDENTIFIER, module_path!(), &source_id, &property_definitions, "<%=  primitive_instance_import_path  %>".to_string());
                ctx.component_definitions
                    .insert(comp_def.source_id.clone(), comp_def);
                (ctx, source_id.to_string())
            },
            _ => (ctx, source_id.to_string()), //early return; this file has already been parsed
        }
    }
}