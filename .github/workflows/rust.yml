name: Rust Build and Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master", "dev" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-deploy:
    runs-on: mars
    steps:
    - uses: actions/checkout@v3

    # - name: Cache Cargo dependencies
    #   uses: actions/cache@v3
    #   with:
    #     path: |
    #       ~/.cargo/registry
    #       ~/.cargo/git
    #       target
    #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-cargo-

    # - name: Cache installed tools
    #   uses: actions/cache@v3
    #   with:
    #     path: |
    #       ~/.cargo/bin
    #     key: ${{ runner.os }}-tools-${{ hashFiles('**/Cargo.lock') }}

    # Install dependencies
    # - name: Install dependencies
    #   run: |
    #     if ! command -v wasm-pack &> /dev/null; then
    #       sudo apt update && sudo apt install -y libgtk-4-dev
    #       curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    #     fi
    #     if ! command -v pax-cli &> /dev/null; then
    #       cargo install pax-cli
    #     fi

    # - name: Build Starter Project
    #   run: pushd examples/src/starter-project && pax-cli build --release --designer && popd

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # - name: Create S3 bucket
    #   run: |
    #     BUCKET_NAME="staging.pax.dev/${{ github.event.pull_request.number }}"
    #     aws s3api create-bucket --bucket $BUCKET_NAME --acl public-read

    - name: Deploy to S3
      run: |
        BUCKET_NAME="staging.pax.dev/${{ github.event.pull_request.number }}"
        aws s3 sync /home/runner/work/pax/pax/scripts s3://$BUCKET_NAME --delete --acl public-read

    # - name: Run tests
    #   run: cargo test --verbose --workspace --exclude pax-chassis-macos --exclude pax-chassis-common --exclude pax-chassis-ios

    # - name: Check formatting
    #   run: cargo fmt -- --check

    # - name: Check for linting errors
    #   run: |
    #     rustup component add clippy
    #     cargo clippy -- -D warnings