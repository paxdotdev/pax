name: Rust Build and Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master", "dev" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-deploy:
    runs-on: mars
    steps:
    - uses: actions/checkout@v3


    - name: Post deployment link as PR comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const prNumber = context.payload.pull_request.number;
          const deploymentUrl = `https://staging.pax.dev/${prNumber}/index.html`;
          github.rest.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.name,
            pull_number: prNumber,
            event: 'COMMENT',
            body: `Deployment preview ready! :rocket:\n\nYou can view this deployment at: [${deploymentUrl}](${deploymentUrl})`
          });
    # # Install dependencies
    # - name: Install dependencies
    #   run: |
    #     if ! command -v wasm-pack &> /dev/null; then
    #       sudo apt update && sudo apt install -y libgtk-4-dev
    #       curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    #     fi
    #     if ! command -v pax-cli &> /dev/null; then
    #       cargo install pax-cli
    #     fi

    # - name: Build Starter Project
    #   run: pushd examples/src/starter-project && pax-cli build --release --designer && popd

    # - name: Configure AWS Credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-1

    # - name: Deploy to S3
    #   run: |
    #     BUCKET_NAME="staging.pax.dev/${{ github.event.pull_request.number }}"
    #     aws s3 sync /home/runner/work/pax/pax/examples/src/starter-project/.pax/build/release/web s3://$BUCKET_NAME --delete --acl public-read
    
    # - name: Invalidate CloudFront
    #   run: |
    #     aws cloudfront create-invalidation --distribution-id E29ZMWF6F0HQ61 --paths "/*"

    # - name: Run tests
    #   run: cargo test --verbose --workspace --exclude pax-chassis-macos --exclude pax-chassis-common --exclude pax-chassis-ios

    # - name: Check formatting
    #   run: cargo fmt -- --check

    # - name: Check for linting errors
    #   run: |
    #     rustup component add clippy
    #     cargo clippy -- -D warnings