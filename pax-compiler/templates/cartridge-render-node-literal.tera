
{% if is_primitive %}
{{ primitive_instance_import_path }}::instantiate(
{% else %}
instantiate_{{ snake_case_type_id }}( Rc::clone(&node_registry),
{% endif %}
 InstantiationArgs {
    common_properties: Rc::new(RefCell::new(CommonProperties {
        {% for cpl_tuple in common_properties_literal %}
            {% if cpl_tuple.1.source_map_start_marker %}
                {{cpl_tuple.1.source_map_start_marker}}
            {% endif %}
            {{cpl_tuple.0.content}}: {{cpl_tuple.1.content}},
            {% if cpl_tuple.1.source_map_end_marker %}
                {{cpl_tuple.1.source_map_end_marker}}
            {% endif %}
        {% endfor %}
    })),
    properties: Rc::new(RefCell::new(
        {
            let mut cps = {{component_properties_struct}}::default();

            {% for property in defined_properties %}
                {% if property.1.source_map_start_marker %}
                    {{property.1.source_map_start_marker}}
                {% endif %}
                cps.{{ property.0.content }} =  {{ property.1.content }} ;
                {% if property.1.source_map_end_marker %}
                    {{property.1.source_map_end_marker}}
                {% endif %}
            {% endfor %}

            cps
        }
    )),
    handler_registry:  Some(Rc::new(RefCell::new({
        #[allow(unused_mut)]
        let mut handler_registry = HandlerRegistry::default();
        {% for entry in events %}
            {% if entry.0.source_map_start_marker %}
                {{entry.0.source_map_start_marker}}
            {% endif %}
            handler_registry.{{entry.0.content}}_handlers = vec![
                {% if entry.1.source_map_start_marker %}
                    {{entry.1.source_map_start_marker}}
                {% endif %}
                {%- if entry.0.content in ['pre_render','mount'] -%}
                    |properties, ctx|{

                       let properties = &mut *properties.as_ref().borrow_mut();
                       if let Some(mut synthesized_self) = properties.downcast_mut::<{{containing_component_struct}}>() {
                           {{ containing_component_struct }}::{{entry.1.content}}(&mut synthesized_self,ctx);
                       } else {panic!()}; //failed to downcast

                    },
                {% else %}
                    |properties, ctx, args|{
                        let properties = &mut *properties.as_ref().borrow_mut();
                        if let Some(mut synthesized_self) = properties.downcast_mut::<{{containing_component_struct}}>() {
                            {{ containing_component_struct }}::{{entry.1.content}}(&mut synthesized_self,ctx,args);
                        } else {panic!()}; //failed to downcast
                    },
                {% endif %}
                {% if entry.1.source_map_end_marker %}
                    {{entry.1.source_map_end_marker}}
                {% endif %}
            ];
            {% if entry.0.source_map_end_marker %}
                {{entry.0.source_map_end_marker}}
            {% endif %}
        {% endfor %}
        handler_registry
    }))),
    node_registry: Rc::clone(&node_registry),
    children: Some(Rc::new(RefCell::new(vec![
        {% for child_literal in children_literal %}
            {{ child_literal }},
        {% endfor %}
    ]))),
    component_template: None,
    scroller_args: None,
    compute_properties_fn: None,
})
