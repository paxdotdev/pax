
{% if is_primitive %}
{{ primitive_instance_import_path }}::instantiate(
{% else %}
instantiate_{{ snake_case_component_id }}( Rc::clone(&instance_registry),
{% endif %} InstantiationArgs {
    properties: PropertiesCoproduct::{{ properties_coproduct_variant }}{% if properties_coproduct_variant != "None" %}( {{component_properties_struct}} {
        {% for property in properties %}
            {{ property.0 }}: Box::new( {{ property.1 }} ),
        {% endfor %}
    }){% endif %},
    handler_registry:  Some(Rc::new(RefCell::new(
                                                 HandlerRegistry {
                                                     click_handlers: vec![
                                                         {%- if events['click'] -%}
                                                                |stack_frame, args|{
                                                                    let properties = (*stack_frame).borrow().get_properties();
                                                                    let properties = &mut *properties.as_ref().borrow_mut();
                                                                    let properties = if let PropertiesCoproduct::{{ active_root }}(p) = properties {p} else {unreachable!()};
                                                                    {{ active_root }}::{{events['click']}}(properties,args);
                                                                },
                                                         {%- endif -%}
                                                     ],
                                                     will_render_handlers: vec![
                                                        {%- if events['will_render'] -%}
                                                                |properties,args|{
                                                                    let properties = &mut *properties.as_ref().borrow_mut();
                                                                    let properties = if let PropertiesCoproduct::{{ active_root }}(p) = properties {p} else {unreachable!()};
                                                                    {{ active_root }}::{{events['will_render']}}(properties, args);
                                                                }
                                                         {%- endif -%}
                                                     ],
                                                     did_mount_handlers: vec![
                                                         {%- if events['did_mount'] -%}
                                                                 |properties|{
                                                                     let properties = &mut *properties.as_ref().borrow_mut();
                                                                     let properties = if let PropertiesCoproduct::{{ active_root }}(p) = properties {p} else {unreachable!()};
                                                                     {{ active_root }}::{{events['did_mount']}}(properties);
                                                                 }
                                                          {%- endif -%}
                                                      ],
                                                     scroll_handlers: vec![
                                                     {%- if events['scroll'] -%}
                                                                 |stack_frame, args|{
                                                                     let properties = (*stack_frame).borrow().get_properties();
                                                                     let properties = &mut *properties.as_ref().borrow_mut();
                                                                     let properties = if let PropertiesCoproduct::{{ active_root }}(p) = properties {p} else {unreachable!()};
                                                                     {{ active_root }}::{{events['scroll']}}(properties,args);
                                                                 },
                                                          {%- endif -%}
                                                      ],
                                                 }
                                             ))),
    instance_registry: Rc::clone(&instance_registry),
    transform: Rc::new(RefCell::new({{ transform_ril }})),
    size: Some(Rc::new(RefCell::new(
        [Box::new({{size_ril[0]}}),Box::new({{size_ril[1]}})]
    ))),
    children: Some(Rc::new(RefCell::new(vec![
        {% for child_literal in children_literal %}
            {{ child_literal }},
        {% endfor %}
    ]))),
    component_template: None,
    scroller_args: None,
    slot_index: {{slot_index_literal}},
    repeat_source_expression_vec: {{repeat_source_expression_literal_vec}},
    repeat_source_expression_range: {{repeat_source_expression_literal_range}},
    conditional_boolean_expression: {{conditional_boolean_expression_literal}},
    compute_properties_fn: None,
})
