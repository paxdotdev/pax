{% if is_root %}
pub fn instantiate_root_component<R: 'static + RenderContext>(instance_registry: Rc<RefCell<InstanceRegistry<R>>>) -> Rc<RefCell<ComponentInstance<R>>> {
    ComponentInstance::instantiate( InstantiationArgs{
        properties: PropertiesCoproduct::{{ properties_coproduct_variant }}( {{ component_properties_struct }}::default() ),
        handler_registry:  Some(Rc::new(RefCell::new(
                                                     HandlerRegistry {
                                                         click_handlers: vec![
                                                             {%- if events['Click'] -%}
                                                                {% for handler in events['Click'] %}
                                                                    |stack_frame, args|{
                                                                        let properties = ((*stack_frame).borrow().get_properties());
                                                                        let properties = &mut *properties.as_ref().borrow_mut();
                                                                        let properties = if let PropertiesCoproduct::{{ component_properties_struct }}(p) = properties {p} else {unreachable!()};
                                                                        {{ component_properties_struct }}::{{handler}}(properties,args);
                                                                    },
                                                                {% endfor %}
                                                             {%- endif -%}
                                                         ],
                                                         will_render_handlers: vec![
                                                            {%- if events['WillRender'] -%}
                                                                 {% for handler in events['WillRender'] %}
                                                                     |properties, args|{
                                                                         let properties = &mut *properties.as_ref().borrow_mut();
                                                                         let properties = if let PropertiesCoproduct::{{ component_properties_struct }}(p) = properties {p} else {unreachable!()};
                                                                         {{ component_properties_struct }}::{{handler}}(properties,args);
                                                                     },
                                                                 {% endfor %}
                                                            {%- endif -%}
                                                         ],
                                                         scroll_handlers: vec![
                                                             {%- if events['Scroll'] -%}
                                                                 {% for handler in events['Scroll'] %}
                                                                     |stack_frame, args|{
                                                                         let properties = ((*stack_frame).borrow().get_properties());
                                                                         let properties = &mut *properties.as_ref().borrow_mut();
                                                                         let properties = if let PropertiesCoproduct::{{ component_properties_struct }}(p) = properties {p} else {unreachable!()};
                                                                         {{ component_properties_struct }}::{{handler}}(properties,args);
                                                                     },
                                                                 {% endfor %}
                                                             {%- endif -%}
                                                         ],
                                                     }
                                                 ))),
        instance_registry: Rc::clone(&instance_registry),
        transform: Transform2D::default_wrapped(),
        size: None,
        children: None,
        component_template: Some(Rc::new(RefCell::new(vec![{{render_nodes_literal}}]))),
        scroller_args: None,
        slot_index: None,
        repeat_source_expression: None,
        conditional_boolean_expression: None,
        compute_properties_fn: Some(Box::new(|properties, rtc|{
            let properties = &mut *properties.as_ref().borrow_mut();
            let properties = if let PropertiesCoproduct::{{ properties_coproduct_variant }}(p) = properties {p} else {unreachable!()};

            {% for prop in properties %}
            if let Some(new_value) = rtc.compute_eased_value(properties.{{prop.name}}._get_transition_manager()) {
            properties.{{ prop.name }}.set(new_value);
            } else if let Some(new_value) = rtc.compute_vtable_value(properties.{{ prop.name }}._get_vtable_id()) {
            let new_value = if let TypesCoproduct::{{ prop.property_type_info.pascalized_fully_qualified_type }}(v) = new_value { v } else { unreachable!() };
            properties.{{ prop.name }}.set(new_value);
            }
            {% endfor %}
        })),
    })
}

{% else %}
pub fn instantiate_{{ snake_case_component_id }}<R: 'static + RenderContext>(instance_registry: Rc<RefCell<InstanceRegistry<R>>>, mut args: InstantiationArgs<R>) -> Rc<RefCell<ComponentInstance<R>>>  {
    args.component_template = Some({{render_nodes_literal}}),

    args.handler_registry = None; //TODO! codegen

    args.compute_properties_fn = Some(Box::new(|properties, rtc|{
        let properties = &mut *properties.as_ref().borrow_mut();
        let properties = if let PropertiesCoproduct::{{ properties_coproduct_variant }}(p) = properties {p} else {unreachable!()};

        {% for prop in properties %}
            if let Some(new_value) = rtc.compute_eased_value(properties.{{prop.name}}._get_transition_manager()) {
            properties.{{ prop.name }}.set(new_value);
            } else if let Some(new_value) = rtc.compute_vtable_value(properties.{{ prop.name }}._get_vtable_id()) {
            let new_value = if let TypesCoproduct::{{ prop.property_type_info.pascalized_fully_qualified_type }}(v) = new_value { v } else { unreachable!() };
            properties.{{ prop.name }}.set(new_value);
            }
        {% endfor %}
    }));

    ComponentInstance::instantiate(args)
}
{% endif %}

