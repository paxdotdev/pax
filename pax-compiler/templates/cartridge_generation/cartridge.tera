{% import "macros.tera" as macros %}

use pax_engine::api::pax_value::ToFromPaxAny;
use pax_engine::api as pax_runtime_api;
use pax_engine::pax_runtime::InstanceNode;
use_RefCell!();

pub struct {{ cartridge_struct_id }} {

}

impl pax_engine::pax_runtime::cartridge::PaxCartridge for {{ cartridge_struct_id }} {
    pub fn instantiate_expression_table() -> std::collections::HashMap<usize, Box<dyn Fn(pax_engine::pax_runtime::ExpressionContext) -> pax_engine::api::pax_value::PaxAny>> {
        let mut vtable: std::collections::HashMap<usize, Box<dyn Fn(pax_engine::pax_runtime::ExpressionContext) -> pax_engine::api::pax_value::PaxAny>> = std::collections::HashMap::new();

        {% for expression_spec in expression_specs %}
        // {{ expression_spec.input_statement.content}}
        {% if expression_spec.input_statement.source_map_start_marker %}
            {{ expression_spec.input_statement.source_map_start_marker }}
        {% endif %}
        vtable.insert({{ expression_spec.id }}, Box::new(|ec: pax_engine::pax_runtime::ExpressionContext| -> pax_engine::api::pax_value::PaxAny {
            {% for invocation in expression_spec.invocations %}
                let {{ invocation.escaped_identifier }} =
                {
                    let properties = if let Some(sf) = ec.stack_frame.resolve_symbol("{{ invocation.root_identifier }}") {
                        std::rc::Rc::clone(&sf)
                    } else {
                        panic!("{{ invocation.escaped_identifier }} didn't have an {{ invocation.stack_offset }}th stackframe");
                    };
                    let mut borrowed = &mut *borrow_mut!(*properties);
                    {% if invocation.property_flags.is_binding_repeat_elem %}
                        // binding repeat elem
                        if let Ok(unwrapped_repeat_item) = pax_engine::pax_runtime::RepeatItem::ref_from_pax_any(&*borrowed) {
                            let i = unwrapped_repeat_item.i.get();
                            let elem = std::rc::Rc::clone(&unwrapped_repeat_item.elem.get().unwrap());

                            {% if invocation.is_numeric %}
                                //iterable numeric as `elem`
                                let elem_borrowed = borrow!(elem);
                                if let Ok(unwrapped) = <{{invocation.fully_qualified_iterable_type}}>::ref_from_pax_any(&*elem_borrowed) {
                                    *unwrapped
                                } else {
                                    panic!();//Failed to unpack string from pax_engine::api::pax_value::PaxAny
                                }
                            {% elif invocation.is_string %}
                                //string as `elem`

                                let elem_borrowed = borrow!(elem);
                                if let Ok(unwrapped) = <{{invocation.fully_qualified_iterable_type}}>::ref_from_pax_any(&*elem_borrowed) {
                                    unwrapped.clone()
                                } else {
                                    panic!();//Failed to unpack string from pax_engine::api::pax_value::PaxAny
                                }

                            {% elif invocation.is_bool %}
                                //bool as `elem`
                                elem.clone()
                            {% else %}
                                //iterable complex type
                                let mut elem_borrowed = &mut *borrow_mut!(elem);
                                if let Ok(dc) = <{{invocation.fully_qualified_iterable_type}}>::mut_from_pax_any(elem_borrowed) {
                                    dc.clone()
                                } else {unreachable!()}
                            {% endif %}
                        } else {panic!()} // Failed to downcast


                    {% elif invocation.property_flags.is_binding_repeat_i %}
                        //binding repeat i
                        let mut unwrapped_repeat_item = if let Ok(val) = pax_engine::pax_runtime::RepeatItem::mut_from_pax_any(&mut *borrowed) {val} else {panic!()}; // Failed to downcast
                        let i = unwrapped_repeat_item.i.get();
                        Numeric::from(i)
                    {% else %}

                        if let Ok(p) = <{{invocation.fully_qualified_properties_struct_type}}>::ref_from_pax_any(&*borrowed) {

                            {% if invocation.is_numeric %}
                                //binding simple numeric property
                                Numeric::from(p.{{invocation.root_identifier}}.get())
                            {% elif invocation.is_string %}
                                //binding simple string property
                                p.{{invocation.root_identifier}}.get()
                            {% else %}
                                //binding cloneable property
                                p.{{invocation.root_identifier}}.get().clone()
                            {% endif %}
                        } else {unreachable!()}
                    {% endif %}
                }{{ invocation.nested_symbol_tail_literal }};
                {% if invocation.is_nested_numeric %}
                    let {{ invocation.escaped_identifier }} = Numeric::from( {{ invocation.escaped_identifier }} );
                {% endif %}

            {% endfor %}

            {% if expression_spec.is_repeat_source_iterable_expression %}
                {# We have a Vec<T>, like a Vec<StackerCell>, and we need to rewrap it into a Vec<std::rc::Rc<RefCell<pax_engine::api::pax_value::PaxAny>>> for Repeat #}
                {% for invocation in expression_spec.invocations %}
                    let {{ invocation.escaped_identifier }} = {{ invocation.escaped_identifier }}.iter().map(|t|{
                        let converted_cell: std::rc::Rc<RefCell<pax_engine::api::pax_value::PaxAny>> = std::rc::Rc::new(RefCell::new(t.clone().to_pax_any()));
                        converted_cell
                    }).collect::<Vec<std::rc::Rc<RefCell<pax_engine::api::pax_value::PaxAny>>>>();
                {% endfor %}
            {% endif %}

            let ___ret = {{ expression_spec.output_statement }};

            ___ret.to_pax_any()
        }));
        {% if expression_spec.input_statement.source_map_end_marker %}
            {{ expression_spec.input_statement.source_map_end_marker }}
        {% endif %}
        {% endfor %}

        vtable
    }
}

{% for c in components -%}
        {{ macros::render_component_factory(component=c) }}
{%- endfor %}

trait TypeFactory {
    type Output: Default + Clone;
    
    fn build_type(&self, args: &pax_engine::pax_manifest::LiteralBlockDefinition, stack_frame: std::rc::Rc<pax_engine::pax_runtime::RuntimePropertiesStackFrame>, table: std::rc::Rc<pax_engine::pax_runtime::ExpressionTable>) -> Self::Output;
}
{% for key, value in type_table -%}
        {{ macros::render_type_factory(type_table=type_table, active_type=value) }}
        {% if value.type_id.pax_type.Singleton %}
        {% endif %}
{%- endfor %}

pub struct DefinitionToInstanceTraverser {
    #[cfg(not(feature = "designtime"))]
    manifest: pax_engine::pax_manifest::PaxManifest,
    #[cfg(feature = "designtime")]
    designtime_manager: std::rc::Rc<RefCell<pax_designtime::DesigntimeManager>>,
}

impl DefinitionToInstanceTraverser {

    #[cfg(not(feature = "designtime"))]
    pub fn new(manifest: pax_engine::pax_manifest::PaxManifest) -> Self {
        Self {
            manifest,
        }
    }

    #[cfg(not(feature = "designtime"))]
    pub fn get_manifest(&self) ->  &pax_engine::pax_manifest::PaxManifest {
        &self.manifest
    }

    #[cfg(feature = "designtime")]
    pub fn new(manifest: pax_engine::pax_manifest::PaxManifest) -> Self {
        let designtime_manager = std::rc::Rc::new(RefCell::new(pax_designtime::DesigntimeManager::new(manifest)));
        Self {
            designtime_manager,
        }
    }

    #[cfg(feature = "designtime")]
    pub fn get_designtime_manager(&self, project_query: String) -> std::rc::Rc<RefCell<pax_designtime::DesigntimeManager>> {
        borrow_mut!(self.designtime_manager).set_project(project_query);
        self.designtime_manager.clone()
    }

    #[cfg(feature = "designtime")]
    pub fn get_manifest(&self) ->  Ref<pax_engine::pax_manifest::PaxManifest> {
        Ref::map(borrow!(self.designtime_manager), |manager| {
            manager.get_manifest()
        })
    }

    pub fn get_main_component(&mut self) -> std::rc::Rc<pax_engine::pax_runtime::ComponentInstance> {
        let main_component_type_id = {
            let manifest = self.get_manifest();
            manifest.main_component_type_id.clone()
        };
        let args = self.build_component_args(&main_component_type_id);
        let main_component = pax_engine::pax_runtime::ComponentInstance::instantiate(args);
        main_component
    }

    pub fn get_component(&mut self, type_id: &pax_engine::pax_manifest::TypeId) -> std::rc::Rc<dyn pax_engine::rendering::InstanceNode> {
        let factory = Self::get_component_factory(type_id).expect("Failed to get component factory");
        let args = self.build_component_args(type_id);
        factory.build_component(args)
    }

    pub fn get_component_factory(type_id: &pax_engine::pax_manifest::TypeId) -> Option<Box<dyn pax_engine::pax_runtime::ComponentFactory>> {
        if type_id.is_blank_component() {
            return Some(Box::new(BlankComponentFactory{}) as Box<dyn pax_engine::pax_runtime::ComponentFactory>);
        }

        match type_id.get_unique_identifier().as_str() {
            {% for component in components %}
            "{{component.type_id._type_id}}" => {
                        Some(Box::new({{component.pascal_identifier}}Factory{}) as Box<dyn pax_engine::pax_runtime::ComponentFactory>)
                },
            {% endfor %}
            _ => None
        }
    }

    pub fn build_component_args(&self, type_id: &pax_engine::pax_manifest::TypeId) -> pax_engine::rendering::InstantiationArgs {
        let manifest = self.get_manifest();
        let property_names = manifest.get_all_property_names(type_id);
        if let None = manifest.components.get(type_id) {
            panic!("Components with type_id {} not found in manifest", type_id);
        }
        let component = manifest.components.get(type_id).unwrap();
        let factory = Self::get_component_factory(&type_id).expect(&format!("No component factory for type: {}", type_id));
        let prototypical_common_properties_factory = factory.build_default_common_properties();
        let prototypical_properties_factory = factory.build_default_properties();

        // pull handlers for this component
        let handlers = manifest.get_component_handlers(type_id);
        let handler_registry = Some(factory.build_component_handlers(handlers));

        let mut component_template = None;
        if let Some(template) = &component.template {

            let root = template.get_root();
            let mut instances = Vec::new();
            for node_id in root {
                let node = template.get_node(&node_id).unwrap();
                match node.type_id.get_pax_type(){
                    pax_engine::pax_manifest::PaxType::If | pax_engine::pax_manifest::PaxType::Slot | pax_engine::pax_manifest::PaxType::Repeat => {
                        instances.push(self.build_control_flow(type_id, &node_id));
                    },
                    pax_engine::pax_manifest::PaxType::Comment => continue,
                    _ => {  
                        instances.push(self.build_template_node(type_id, &node_id));
                    }
                }
            }
            component_template = Some(RefCell::new(instances));
        }

        pax_engine::rendering::InstantiationArgs {
            prototypical_common_properties_factory,
            prototypical_properties_factory,
            handler_registry,
            component_template,
            children: None,
            template_node_identifier: None,
            properties_scope_factory: Some(factory.get_properties_scope_factory()),
        }
    }

    pub fn build_control_flow(&self, containing_component_type_id: &pax_engine::pax_manifest::TypeId, node_id: &pax_engine::pax_manifest::TemplateNodeId) -> std::rc::Rc<dyn pax_engine::rendering::InstanceNode> {

        let manifest = self.get_manifest();
        let prototypical_common_properties_factory = Box::new(|_,_| std::rc::Rc::new(RefCell::new(CommonProperties::default())));

        let containing_component = manifest.components.get(containing_component_type_id).unwrap();
        let containing_template = containing_component.template.as_ref().unwrap();
        let tnd = containing_template.get_node(node_id).unwrap();
        let unique_identifier = pax_engine::pax_manifest::UniqueTemplateNodeIdentifier::build(containing_component_type_id.clone(), node_id.clone());

        let children = self.build_children(containing_component_type_id, &node_id);
        match tnd.type_id.get_pax_type(){
            pax_engine::pax_manifest::PaxType::If => {
                let expression_info = tnd
                    .control_flow_settings
                    .as_ref()
                    .unwrap()
                    .condition_expression_info
                    .as_ref()
                    .unwrap();
                let vtable_id = expression_info.vtable_id;
                let dep_symbols = expression_info.dependencies.clone();
                let prototypical_properties_factory : Box<dyn Fn(std::rc::Rc<pax_engine::pax_runtime::RuntimePropertiesStackFrame>, std::rc::Rc<pax_engine::pax_runtime::ExpressionTable>) -> std::rc::Rc<RefCell<pax_engine::api::pax_value::PaxAny>>> = Box::new(move |stack_frame, table| std::rc::Rc::new(RefCell::new( {
                        let mut properties = pax_engine::pax_runtime::ConditionalProperties::default();
                        let cloned_table = table.clone();
                        let cloned_stack = stack_frame.clone();

                        let mut dependencies = Vec::new();
                        for dependency in &dep_symbols {
                            if let Some(p) = stack_frame.resolve_symbol_as_erased_property(dependency) {
                                dependencies.push(p);
                            } else {
                                panic!("Failed to resolve symbol {}", dependency);
                            }
                        }

                        properties.boolean_expression =  Property::computed_with_name(move || {
                            let new_value_wrapped: pax_engine::api::pax_value::PaxAny = cloned_table.compute_vtable_value(&cloned_stack, vtable_id);
                            let coerced = new_value_wrapped.try_coerce::<bool>().map_err(|e| format!("expr with vtable_id {} failed: {}", vtable_id, e)).unwrap();
                            coerced
                        }, &dependencies, "conditional (if) expr");
                        properties.to_pax_any()
                    })));
                pax_engine::pax_runtime::ConditionalInstance::instantiate(pax_engine::rendering::InstantiationArgs {
                    prototypical_common_properties_factory,
                    prototypical_properties_factory,
                    handler_registry: None,
                    component_template: None,
                    children: Some(RefCell::new(children)),
                    template_node_identifier: Some(unique_identifier),
                    properties_scope_factory: None,
                })
            },
            pax_engine::pax_manifest::PaxType::Slot => {
                let expression_info = tnd
                    .control_flow_settings
                    .as_ref()
                    .unwrap()
                    .slot_index_expression_info
                    .as_ref()
                    .unwrap();
                
                let vtable_id = expression_info.vtable_id;
                let dep_symbols = expression_info.dependencies.clone();

                let prototypical_properties_factory : Box<dyn Fn(std::rc::Rc<pax_engine::pax_runtime::RuntimePropertiesStackFrame>, std::rc::Rc<pax_engine::pax_runtime::ExpressionTable>) -> std::rc::Rc<RefCell<pax_engine::api::pax_value::PaxAny>>>  = Box::new(move |stack_frame, table| std::rc::Rc::new(RefCell::new( {
                        let mut properties = Slot::default();
                        let cloned_table = table.clone();
                        let cloned_stack = stack_frame.clone();

                        let mut dependencies = Vec::new();
                        for dependency in &dep_symbols {
                            if let Some(p) = stack_frame.resolve_symbol_as_erased_property(dependency) {
                                dependencies.push(p);
                            } else {
                                panic!("Failed to resolve symbol {}", dependency);
                            }
                        }
                        properties.index = Property::computed_with_name(move || {
                            let new_value_wrapped: pax_engine::api::pax_value::PaxAny = cloned_table.compute_vtable_value(&cloned_stack, vtable_id);
                            let coerced = new_value_wrapped.try_coerce::<Numeric>().unwrap();
                            coerced
                        }, &dependencies, "slot index");
                        properties.to_pax_any()
                    })));
                pax_engine::pax_runtime::SlotInstance::instantiate(pax_engine::rendering::InstantiationArgs {
                    prototypical_common_properties_factory,
                    prototypical_properties_factory,
                    handler_registry: None,
                    component_template: None,
                    children: Some(RefCell::new(children)),
                    template_node_identifier: Some(unique_identifier),
                    properties_scope_factory: None,
                })
            },
            pax_engine::pax_manifest::PaxType::Repeat => {
                let rsd = tnd
                    .control_flow_settings
                    .as_ref()
                    .unwrap()
                    .repeat_source_definition
                    .clone()
                    .unwrap();
                let rpd = tnd
                    .control_flow_settings
                    .as_ref()
                    .unwrap()
                    .repeat_predicate_definition
                    .clone()
                    .unwrap();
                let expression_info = rsd.expression_info.as_ref().unwrap();
                let vtable_id = expression_info.vtable_id.clone();
                let dep_symbols = expression_info.dependencies.clone();
                let prototypical_properties_factory : Box<dyn Fn(std::rc::Rc<pax_engine::pax_runtime::RuntimePropertiesStackFrame>, std::rc::Rc<pax_engine::pax_runtime::ExpressionTable>) -> std::rc::Rc<RefCell<pax_engine::api::pax_value::PaxAny>>> = Box::new(move |stack_frame,table| std::rc::Rc::new(RefCell::new( {
                        let mut properties = pax_engine::pax_runtime::RepeatProperties::default();

                        let mut dependencies = Vec::new();
                        for dependency in &dep_symbols {
                            if let Some(p) = stack_frame.resolve_symbol_as_erased_property(dependency) {
                                dependencies.push(p);
                            } else {
                                panic!("Failed to resolve symbol {}", dependency);
                            }
                        }

                        properties.source_expression_vec = 
                            if let Some(t) = &rsd.symbolic_binding {
                                let cloned_table = table.clone();
                                let cloned_stack = stack_frame.clone();
                                Some(
                                    Property::computed_with_name(move || {
                                        let new_value_wrapped: pax_engine::api::pax_value::PaxAny = cloned_table.compute_vtable_value(&cloned_stack, vtable_id);
                                        let coerced = new_value_wrapped.try_coerce::<Vec<std::rc::Rc<RefCell<pax_engine::api::pax_value::PaxAny>>>>().unwrap();
                                        coerced
                                    }, &dependencies, "repeat source vec")
                                    ) 
                            } else {
                                None
                            };
                            
                        properties.source_expression_range =
                            if let Some(t) = &rsd.range_expression_paxel {
                                let cloned_table = table.clone();
                                let cloned_stack = stack_frame.clone();
                                Some(
                                    Property::computed_with_name(move || {
                                        let new_value_wrapped: pax_engine::api::pax_value::PaxAny = cloned_table.compute_vtable_value(&cloned_stack, vtable_id);
                                        let coerced = new_value_wrapped.try_coerce::<std::ops::Range::<isize>>().unwrap();
                                        coerced
                                    }, &dependencies, "repeat source range")
                                )
                            } else {
                                None
                            };

                        let (elem, index) = match &rpd {
                            pax_engine::pax_manifest::ControlFlowRepeatPredicateDefinition::ElemId(token) => {
                                (Some(token.raw_value.clone()), None)
                            },
                            pax_engine::pax_manifest::ControlFlowRepeatPredicateDefinition::ElemIdIndexId(t1,t2) => {
                                (Some(t1.raw_value.clone()), Some(t2.raw_value.clone()))
                            }
                        };
                        properties.iterator_i_symbol = index;
                        properties.iterator_elem_symbol = elem;
                        properties.to_pax_any()
                    })));
                pax_engine::pax_runtime::RepeatInstance::instantiate(pax_engine::rendering::InstantiationArgs {
                    prototypical_common_properties_factory,
                    prototypical_properties_factory,
                    handler_registry: None,
                    component_template: None,
                    children: Some(RefCell::new(children)),
                    template_node_identifier: Some(unique_identifier),
                    properties_scope_factory: None
                })
            },
            _ => {  
                unreachable!("Unexpected control flow type {}", tnd.type_id)
            }
        
        }

    }

    fn build_children(&self, containing_component_type_id: &pax_engine::pax_manifest::TypeId, node_id: &pax_engine::pax_manifest::TemplateNodeId) -> Vec<std::rc::Rc<dyn pax_engine::rendering::InstanceNode>> {
        let manifest = self.get_manifest();
        let containing_component = manifest.components.get(containing_component_type_id).unwrap();
        let containing_template = containing_component.template.as_ref().unwrap();
        let children = containing_template.get_children(node_id);

        let mut children_instances = Vec::new();
        for child_id in &children.unwrap_or_default() {
            let child = containing_template.get_node(&child_id).unwrap();
            match child.type_id.get_pax_type() {
                pax_engine::pax_manifest::PaxType::If | pax_engine::pax_manifest::PaxType::Slot | pax_engine::pax_manifest::PaxType::Repeat  => {
                    children_instances.push(self.build_control_flow(containing_component_type_id, &child_id));
                },
                pax_engine::pax_manifest::PaxType::Comment => continue,
                _ => {  
                    children_instances.push(self.build_template_node(containing_component_type_id, child_id));
                }
            }
        }
        children_instances
    }

    pub fn build_template_node(&self, containing_component_type_id: &pax_engine::pax_manifest::TypeId, node_id: &pax_engine::pax_manifest::TemplateNodeId) -> std::rc::Rc<dyn pax_engine::rendering::InstanceNode> {
        let manifest = self.get_manifest();

        let containing_component = manifest.components.get(containing_component_type_id).unwrap();
        let containing_template = containing_component.template.as_ref().unwrap();
        let node = containing_template.get_node(node_id).unwrap();
        let containing_component_factory = Self::get_component_factory(containing_component_type_id).unwrap();

        let mut args = self.build_component_args(&node.type_id);
        let node_component_factory = Self::get_component_factory(&node.type_id).unwrap();

        // update handlers from tnd
        let handlers_from_tnd = manifest.get_inline_event_handlers(node);
        let updated_registry = if let Some(registry) = args.handler_registry {
            containing_component_factory.add_inline_handlers(handlers_from_tnd, registry)    
        } else {
            containing_component_factory.add_inline_handlers(handlers_from_tnd, std::rc::Rc::new(RefCell::new(pax_engine::pax_runtime::HandlerRegistry::default())))
        };

        args.handler_registry = Some(updated_registry);

        // update properties from tnd 
        let inline_properties = manifest.get_inline_properties(containing_component_type_id, node);
        let updated_properties = node_component_factory.build_inline_properties(inline_properties.clone());
        args.prototypical_properties_factory = updated_properties;

        // update common properties from tnd
        let updated_common_properties = node_component_factory.build_inline_common_properties(inline_properties);
        args.prototypical_common_properties_factory = updated_common_properties;

       
        args.children = Some(RefCell::new(self.build_children(containing_component_type_id, node_id)));
        args.template_node_identifier = Some(pax_engine::pax_manifest::UniqueTemplateNodeIdentifier::build(containing_component_type_id.clone(), node_id.clone()));

        node_component_factory.build_component(args)
    }


    pub fn get_template_node_by_id(&self, id: &str) -> Option<std::rc::Rc<dyn pax_engine::rendering::InstanceNode>> {
        let manifest = self.get_manifest();
        let main_component_type_id = manifest.main_component_type_id.clone();
        let main_component = manifest.components.get(&main_component_type_id).unwrap();
        let template = main_component.template.as_ref().unwrap();
        for node_id in template.get_ids() {
            if let Some(found) = self.recurse_get_template_node_by_id(id, &main_component_type_id, node_id) {
                return Some(self.build_template_node(&found.0, &found.1))
            }
        }
        None
    }

    fn check_for_id_in_template_node(&self, id: &str, tnd: &pax_engine::pax_manifest::TemplateNodeDefinition) -> bool {
        if let Some(settings) = &tnd.settings {
            for setting in settings {
                if let pax_engine::pax_manifest::SettingElement::Setting(token, value) = setting {
                    if &token.raw_value == "id" {
                        if let pax_engine::pax_manifest::ValueDefinition::LiteralValue(lv) = value {
                            if lv.raw_value == id {
                                return true;
                            }
                        }
                    
                    }
                }
            }
        }
        false
    }

    fn recurse_get_template_node_by_id<'a>(&'a self, id: &str, containing_component_type_id: &'a pax_engine::pax_manifest::TypeId, node_id: &'a pax_engine::pax_manifest::TemplateNodeId) -> Option<(pax_engine::pax_manifest::TypeId, pax_engine::pax_manifest::TemplateNodeId)>{
        let manifest = self.get_manifest();
        let containing_component = manifest.components.get(containing_component_type_id).unwrap();
        let containing_template = containing_component.template.as_ref().unwrap();
        let tnd = containing_template.get_node(node_id).unwrap();

        if self.check_for_id_in_template_node(id, tnd) {
            return Some((containing_component_type_id.clone(), node_id.clone()));
        }

        if let Some(component) = &manifest.components.get(&tnd.type_id){
            if let Some(template) = &component.template {
                for node_id in template.get_ids() {
                    if let Some(found) = self.recurse_get_template_node_by_id(id, &tnd.type_id, node_id) {
                        return Some(found.clone());
                    }
                }
            }
        }
        None
    }
}
