{% import "macros.tera" as macros %}

#![allow(unused, unused_imports, non_snake_case, unused_parens)]
use pax_manifest::*;
use pax_runtime::api::*;
use pax_runtime::*;
use pax_manifest::deserializer::{from_pax, from_pax_try_intoable_literal};
use std::cell::Ref;
use pax_runtime::api::properties::ErasedProperty;
use pax_runtime::api::properties::Erasable;

const INITAL_MANIFEST: &str = include_str!("../initial-manifest.json");

// generate imports, pointing to userland cartridge `pub mod pax_reexports`
{% for import in imports %}
use {{ import }};
{% endfor %}


pub fn instantiate_expression_table() -> HashMap<usize, Box<dyn Fn(ExpressionContext) -> Box<dyn Any>>> {
    let mut vtable: HashMap<usize, Box<dyn Fn(ExpressionContext) -> Box<dyn Any>>> = HashMap::new();

    {% for expression_spec in expression_specs %}
    // {{ expression_spec.input_statement.content}}
    {% if expression_spec.input_statement.source_map_start_marker %}
        {{ expression_spec.input_statement.source_map_start_marker }}
    {% endif %}
    vtable.insert({{ expression_spec.id }}, Box::new(|ec: ExpressionContext| -> Box<dyn Any> {
        {% for invocation in expression_spec.invocations %}
            let {{ invocation.escaped_identifier }} =
            {
                let properties = if let Some(sf) = ec.stack_frame.resolve_symbol("{{ invocation.root_identifier }}") {
                    Rc::clone(&sf)
                } else {
                    panic!("{{ invocation.escaped_identifier }} didn't have an {{ invocation.stack_offset }}th stackframe");
                };
                let mut borrowed = &mut *(*properties).borrow_mut();
                {% if invocation.property_flags.is_binding_repeat_elem %}
                    // binding repeat elem
                    if let Some(unwrapped_repeat_item) = borrowed.downcast_ref::<RepeatItem>() {
                        let i = unwrapped_repeat_item.i.get();
                        let elem = Rc::clone(&unwrapped_repeat_item.elem.get().unwrap());

                        {% if invocation.is_numeric %}
                            //iterable numeric as `elem`
                            get_numeric_from_wrapped_properties(elem)
                        {% elif invocation.is_string %}
                            //string as `elem`

                            let elem_borrowed = elem.borrow();
                            if let Some(unwrapped) = elem_borrowed.downcast_ref::<{{invocation.fully_qualified_iterable_type}}>() {
                                StringBox::from(unwrapped)
                            } else {
                                panic!();//Failed to unpack string from dyn Any
                            }

                        {% elif invocation.is_bool %}
                            //bool as `elem`
                            elem.clone()
                        {% else %}
                            //iterable complex type
                            let mut elem_borrowed = elem.borrow_mut();
                            if let Some(dc) = elem_borrowed.downcast_mut::<{{invocation.fully_qualified_iterable_type}}>() {
                                dc.clone()
                            } else {unreachable!()}
                        {% endif %}
                    } else {panic!()} // Failed to downcast


                {% elif invocation.property_flags.is_binding_repeat_i %}
                    //binding repeat i
                    let mut unwrapped_repeat_item = if let Some(val) = borrowed.downcast_mut::<RepeatItem>() {val} else {panic!()}; // Failed to downcast
                    let i = unwrapped_repeat_item.i.get();
                    Numeric::from(i)
                {% else %}

                    if let Some(p) = borrowed.downcast_ref::<{{invocation.fully_qualified_properties_struct_type}}>(){

                        {% if invocation.is_numeric %}
                            //binding simple numeric property
                            Numeric::from(p.{{invocation.root_identifier}}.get())
                        {% elif invocation.is_string %}
                            //binding simple stringbox property
                            StringBox::from(p.{{invocation.root_identifier}}.get())
                        {% else %}
                            //binding cloneable property
                            p.{{invocation.root_identifier}}.get().clone()
                        {% endif %}
                    } else {unreachable!()}
                {% endif %}
            }{{ invocation.nested_symbol_tail_literal }};
            {% if invocation.is_nested_numeric %}
                let {{ invocation.escaped_identifier }} = Numeric::from( {{ invocation.escaped_identifier }} );
            {% endif %}

        {% endfor %}

        {% if expression_spec.is_repeat_source_iterable_expression %}
            {# We have a Vec<T>, like a Vec<StackerCell>, and we need to rewrap it into a Vec<Rc<RefCell<dyn Any>>> for Repeat #}
            {% for invocation in expression_spec.invocations %}
                let {{ invocation.escaped_identifier }} = {{ invocation.escaped_identifier }}.iter().map(|t|{
                    let converted_cell: Rc<RefCell<(dyn Any + 'static)>> = Rc::new(RefCell::new(t.clone()));
                    converted_cell
                }).collect::<Vec<Rc<RefCell<dyn Any>>>>();
            {% endfor %}
        {% endif %}

        let ___ret : {{ expression_spec.output_type }} = ({{ expression_spec.output_statement }}).into();

        Box::new(___ret)
    }));
    {% if expression_spec.input_statement.source_map_end_marker %}
        {{ expression_spec.input_statement.source_map_end_marker }}
    {% endif %}
    {% endfor %}

    vtable
}

pub trait ComponentFactory {

    /// Returns the default CommonProperties factory
    fn build_default_common_properties(&self) -> Box<dyn Fn(Rc<RuntimePropertiesStackFrame>, Rc<ExpressionTable>) -> Rc<RefCell<CommonProperties>>>{
        Box::new(|_,_| Rc::new(RefCell::new(CommonProperties::default())))    
    }

    /// Returns the default properties factory for this component
    fn build_default_properties(&self) -> Box<dyn Fn(Rc<RuntimePropertiesStackFrame>, Rc<ExpressionTable>) -> Rc<RefCell<dyn Any>>>;
    
    /// Returns the CommonProperties factory based on the defined properties 
    fn build_inline_common_properties(&self, defined_properties: HashMap<String,ValueDefinition>) ->Box<dyn Fn(Rc<RuntimePropertiesStackFrame>, Rc<ExpressionTable>) -> Rc<RefCell<CommonProperties>>> {
        Box::new(move |stack_frame , table | Rc::new(RefCell::new({
            let mut cp = CommonProperties::default();
            for (key, value) in &defined_properties {
                match key.as_str() {
                    {% for common_property in common_properties %}
                    "{{common_property.name}}" => {
                        let resolved_property: Property<{{common_property.property_type._type_id}}> = match value.clone() {
                            ValueDefinition::LiteralValue(lv) => {
                                {% if common_property.property_type.is_intoable_downstream_type %}
                                    let mi = from_pax_try_intoable_literal(&lv.raw_value);
                                    if let Ok(intoable_literal) = mi {
                                        Property::new(intoable_literal.into())
                                    } else {
                                        Property::new(from_pax::<{{common_property.property_type._type_id}}>(&lv.raw_value).unwrap().into())
                                    }
                                {% else %}
                                    Property::new(from_pax::<{{common_property.property_type._type_id}}>(&lv.raw_value).unwrap().into())
                                {% endif %}
                            },
                            ValueDefinition::Expression(token, info) | ValueDefinition::Identifier(token,info) =>
                            {
                                if let Some(info) = info {
                                    let mut dependents = vec![];
                                    for dependency in &info.dependencies {
                                        if let Some(p) = stack_frame.resolve_symbol_as_erased_property(dependency) {
                                            dependents.push(p);
                                        } else {
                                            panic!("Failed to resolve symbol {}", dependency);
                                        }
                                    }
                                    let cloned_stack = stack_frame.clone();
                                    let cloned_table = table.clone();
                                    Property::computed(move || {
                                        let new_value_wrapped: Box<dyn Any> = cloned_table.compute_vtable_value(&cloned_stack, info.vtable_id.clone());
                                        if let Ok(downcast_value) = new_value_wrapped.downcast::<{{common_property.property_type._type_id}}>() {
                                            *downcast_value
                                        } else {
                                            panic!(
                                                "property has an unexpected type for vtable id {}",
                                                info.vtable_id
                                            );
                                        }
                                    
                                    }, &dependents)
                                } else {
                                    unreachable!("No info for expression")
                                }
                            },
                            _ => unreachable!("Invalid value definition for {{common_property.name}}")
                        };
                        {%if common_property.is_optional %}
                            cp.{{common_property.name}} = Some(resolved_property)
                        {% else %}
                            cp.{{common_property.name}} = resolved_property
                        {% endif %}
                    },
                    {% endfor %}
                    _ => {}
                }
            }

            cp.clone()
        })))
    }

    /// Returns the properties factory based on the defined properties
    fn build_inline_properties(&self, defined_properties: HashMap<String,ValueDefinition>) -> Box<dyn Fn(Rc<RuntimePropertiesStackFrame>, Rc<ExpressionTable>) -> Rc<RefCell<dyn Any>>>;
    
    /// Returns the requested closure for the handler registry based on the defined handlers for this component
    /// The argument type is extrapolated based on how the handler was used in the initial compiled template
    fn build_handler(&self, fn_name: &str) -> fn(Rc<RefCell<dyn Any>>, &NodeContext, Option::<Box<dyn Any>>);
    
    /// Returns the handler registry based on the defined handlers for this component
    fn build_component_handlers(&self, handlers: Vec<(String, Vec<String>)>) -> Rc<RefCell<HandlerRegistry>>;

    // Takes a hander registry and adds the given inline handlers to it
    fn add_inline_handlers(&self, handlers: Vec<(String, String)>, registry: Rc<RefCell<HandlerRegistry>>) -> Rc<RefCell<HandlerRegistry>>;
    
    /// Returns the compute properties function for the component
    fn build_compute_properties_fn(&self) -> Option<Box<dyn Fn(&ExpandedNode, &ExpressionTable, &Globals)>>;
    
    // Calls the instantion function for the component
    fn build_component(&self, args: InstantiationArgs) -> Rc<dyn InstanceNode>;

    // Returns the property scope for the component
    fn get_properties_scope_factory(&self) -> Box<dyn Fn(Rc<RefCell<dyn Any>>) -> HashMap<String, ErasedProperty>> {
        Box::new(|_| HashMap::new())
    }
}

{% for c in components -%}
        {{ macros::render_component_factory(component=c) }}
{%- endfor %}

trait TypeFactory {
    type Output: Default + Clone;
    
    fn build_type(&self, args: &LiteralBlockDefinition, stack_frame: Rc<RuntimePropertiesStackFrame>, table: Rc<ExpressionTable>) -> Self::Output;
}
{% for key, value in type_table -%}
        {{ macros::render_type_factory(type_table=type_table, active_type=value) }}
        {% if value.type_id.pax_type.Singleton %}
        {% endif %}
{%- endfor %}

pub struct DefinitionToInstanceTraverser {
    #[cfg(not(feature = "designtime"))]
    manifest: PaxManifest,
    #[cfg(feature = "designtime")]
    designtime_manager: Rc<RefCell<pax_designtime::DesigntimeManager>>,
}

impl DefinitionToInstanceTraverser {

    #[cfg(not(feature = "designtime"))]
    pub fn new() -> Self {
        let manifest: PaxManifest = serde_json::from_str(INITAL_MANIFEST).expect("Failed to deserialize initial manifest");
        Self {
            manifest,
        }
    }

    #[cfg(not(feature = "designtime"))]
    pub fn get_manifest(&self) ->  &PaxManifest {
        &self.manifest
    }

    #[cfg(feature = "designtime")]
    pub fn new() -> Self {
        let manifest: PaxManifest = serde_json::from_str(INITAL_MANIFEST).expect("Failed to deserialize initial manifest");
        let designtime_manager = Rc::new(RefCell::new(pax_designtime::DesigntimeManager::new(manifest)));
        Self {
            designtime_manager,
        }
    }

    #[cfg(feature = "designtime")]
    pub fn get_designtime_manager(&self) -> Rc<RefCell<pax_designtime::DesigntimeManager>> {
        self.designtime_manager.clone()
    }

    #[cfg(feature = "designtime")]
    pub fn get_manifest(&self) ->  Ref<PaxManifest> {
        Ref::map(self.designtime_manager.borrow(), |manager| {
            manager.get_manifest()
        })
    }

    pub fn get_main_component(&mut self) -> Rc<ComponentInstance> {
        let main_component_type_id = {
            let manifest = self.get_manifest();
            manifest.main_component_type_id.clone()
        };
        let args = self.build_component_args(&main_component_type_id);
        let main_component = ComponentInstance::instantiate(args);
        main_component
    }

    pub fn get_component(&mut self, type_id: &TypeId) -> Rc<dyn InstanceNode> {
        let factory = Self::get_component_factory(type_id).expect("Failed to get component factory");
        let args = self.build_component_args(type_id);
        factory.build_component(args)
    }

    pub fn get_component_factory(type_id: &TypeId) -> Option<Box<dyn ComponentFactory>> {
        if type_id.is_blank_component() {
            return Some(Box::new(BlankComponentFactory{}) as Box<dyn ComponentFactory>);
        }

        match type_id.get_unique_identifier().as_str() {
            {% for component in components %}
            "{{component.type_id._type_id}}" => {
                        Some(Box::new({{component.pascal_identifier}}Factory{}) as Box<dyn ComponentFactory>)
                },
            {% endfor %}
            _ => None
        }
    }

    pub fn build_component_args(&self, type_id: &TypeId) -> InstantiationArgs {
        let manifest = self.get_manifest();
        let property_names = manifest.get_all_property_names(type_id);
        if let None = manifest.components.get(type_id) {
            panic!("Components with type_id {} not found in manifest", type_id);
        }
        let component = manifest.components.get(type_id).unwrap();
        let factory = Self::get_component_factory(&type_id).expect(&format!("No component factory for type: {}", type_id));
        let prototypical_common_properties_factory = factory.build_default_common_properties();
        let prototypical_properties_factory = factory.build_default_properties();

        // pull handlers for this component
        let handlers = manifest.get_component_handlers(type_id);
        let handler_registry = Some(factory.build_component_handlers(handlers));


        let compute_properties_fn = factory.build_compute_properties_fn();

        let mut component_template = None;
        if let Some(template) = &component.template {

            let root = template.get_root();
            let mut instances = Vec::new();
            for node_id in root {
                let node = template.get_node(&node_id).unwrap();
                match node.type_id.get_pax_type(){
                    PaxType::If | PaxType::Slot | PaxType::Repeat => {
                        instances.push(self.build_control_flow(type_id, &node_id));
                    },
                    PaxType::Comment => continue,
                    _ => {  
                        instances.push(self.build_template_node(type_id, &node_id));
                    }
                }
            }
            component_template = Some(RefCell::new(instances));
        }

        InstantiationArgs {
            prototypical_common_properties_factory,
            prototypical_properties_factory,
            handler_registry,
            component_template,
            compute_properties_fn,
            children: None,
            template_node_identifier: None,
            properties_scope_factory: Some(factory.get_properties_scope_factory()),
        }
    }

    pub fn build_control_flow(&self, containing_component_type_id: &TypeId, node_id: &TemplateNodeId) -> Rc<dyn InstanceNode> {

        let manifest = self.get_manifest();
        let prototypical_common_properties_factory = Box::new(|_,_| Rc::new(RefCell::new(CommonProperties::default())));

        let containing_component = manifest.components.get(containing_component_type_id).unwrap();
        let containing_template = containing_component.template.as_ref().unwrap();
        let tnd = containing_template.get_node(node_id).unwrap();
        let unique_identifier = UniqueTemplateNodeIdentifier::build(containing_component_type_id.clone(), node_id.clone());

        let children = self.build_children(containing_component_type_id, &node_id);
        match tnd.type_id.get_pax_type(){
            PaxType::If => {
                let vtable_id = tnd.control_flow_settings
                    .as_ref()
                    .unwrap()
                    .condition_expression_vtable_id
                    .unwrap();
                let prototypical_properties_factory : Box<dyn Fn(Rc<RuntimePropertiesStackFrame>, Rc<ExpressionTable>) -> Rc<RefCell<dyn Any>>> = Box::new(move |_,_| Rc::new(RefCell::new( {
                        let mut properties = ConditionalProperties::default();
                        properties.boolean_expression = Property::computed(|| true, &Vec::new()); // TODODAG insert actual logic
                        properties
                    })));
                ConditionalInstance::instantiate(InstantiationArgs {
                    prototypical_common_properties_factory,
                    prototypical_properties_factory,
                    handler_registry: None,
                    component_template: None,
                    compute_properties_fn: None,
                    children: Some(RefCell::new(children)),
                    template_node_identifier: Some(unique_identifier),
                    properties_scope_factory: None,
                })
            },
            PaxType::Slot => {
                let vtable_id = tnd
                    .control_flow_settings
                    .as_ref()
                    .unwrap()
                    .slot_index_expression_vtable_id
                    .unwrap();
                let prototypical_properties_factory : Box<dyn Fn(Rc<RuntimePropertiesStackFrame>, Rc<ExpressionTable>) -> Rc<RefCell<dyn Any>>>  = Box::new(move |_,_| Rc::new(RefCell::new( {
                        let mut properties = SlotProperties::default();
                        properties.index = Property::computed(|| Default::default(), &Vec::new()); // TODODAG insert actual logic (using vtable, stack, vtable_id)
                        properties
                    })));
                SlotInstance::instantiate(InstantiationArgs {
                    prototypical_common_properties_factory,
                    prototypical_properties_factory,
                    handler_registry: None,
                    component_template: None,
                    compute_properties_fn: None,
                    children: Some(RefCell::new(children)),
                    template_node_identifier: Some(unique_identifier),
                    properties_scope_factory: None,
                })
            },
            PaxType::Repeat => {
                let rsd = tnd
                    .control_flow_settings
                    .as_ref()
                    .unwrap()
                    .repeat_source_definition
                    .clone()
                    .unwrap();
                let rpd = tnd
                    .control_flow_settings
                    .as_ref()
                    .unwrap()
                    .repeat_predicate_definition
                    .clone()
                    .unwrap();
                let vtable_id = rsd.vtable_id.unwrap();
                let prototypical_properties_factory : Box<dyn Fn(Rc<RuntimePropertiesStackFrame>, Rc<ExpressionTable>) -> Rc<RefCell<dyn Any>>> = Box::new(move |_,_| Rc::new(RefCell::new( {
                        let mut properties = RepeatProperties::default();
                        properties.source_expression_vec = 
                            if let Some(t) = &rsd.symbolic_binding {
                                Some(Property::computed(|| Default::default(),  &Vec::new())) // TODODAG
                            } else {
                                None
                            };
                        properties.source_expression_range =
                            if let Some(t) = &rsd.range_expression_paxel {
                                Some(Property::computed(|| Default::default(),  &Vec::new())) // TODODAG
                            } else {
                                None
                            };
                        properties
                    })));
                RepeatInstance::instantiate(InstantiationArgs {
                    prototypical_common_properties_factory,
                    prototypical_properties_factory,
                    handler_registry: None,
                    component_template: None,
                    compute_properties_fn: None,
                    children: Some(RefCell::new(children)),
                    template_node_identifier: Some(unique_identifier),
                    properties_scope_factory: None
                })
            },
            _ => {  
                unreachable!("Unexpected control flow type {}", tnd.type_id)
            }
        
        }

    }

    fn build_children(&self, containing_component_type_id: &TypeId, node_id: &TemplateNodeId) -> Vec<Rc<dyn InstanceNode>> {
        let manifest = self.get_manifest();
        let containing_component = manifest.components.get(containing_component_type_id).unwrap();
        let containing_template = containing_component.template.as_ref().unwrap();
        let children = containing_template.get_children(node_id);

        let mut children_instances = Vec::new();
        for child_id in &children.unwrap_or_default() {
            let child = containing_template.get_node(&child_id).unwrap();
            match child.type_id.get_pax_type() {
                PaxType::If | PaxType::Slot | PaxType::Repeat  => {
                    children_instances.push(self.build_control_flow(containing_component_type_id, &child_id));
                },
                PaxType::Comment => continue,
                _ => {  
                    children_instances.push(self.build_template_node(containing_component_type_id, child_id));
                }
            }
        }
        children_instances
    }

    pub fn build_template_node(&self, containing_component_type_id: &TypeId, node_id: &TemplateNodeId) -> Rc<dyn InstanceNode> {
        let manifest = self.get_manifest();

        let containing_component = manifest.components.get(containing_component_type_id).unwrap();
        let containing_template = containing_component.template.as_ref().unwrap();
        let node = containing_template.get_node(node_id).unwrap();
        let containing_component_factory = Self::get_component_factory(containing_component_type_id).unwrap();

        let mut args = self.build_component_args(&node.type_id);
        let node_component_factory = Self::get_component_factory(&node.type_id).unwrap();

        // update handlers from tnd
        let handlers_from_tnd = manifest.get_inline_event_handlers(node);
        let updated_registry = if let Some(registry) = args.handler_registry {
            containing_component_factory.add_inline_handlers(handlers_from_tnd, registry)    
        } else {
            containing_component_factory.add_inline_handlers(handlers_from_tnd, Rc::new(RefCell::new(HandlerRegistry::default())))       
        };

        args.handler_registry = Some(updated_registry);

        // update properties from tnd 
        let inline_properties = manifest.get_inline_properties(containing_component_type_id, node);
        let updated_properties = node_component_factory.build_inline_properties(inline_properties.clone());
        args.prototypical_properties_factory = updated_properties;

        // update common properties from tnd
        let updated_common_properties = node_component_factory.build_inline_common_properties(inline_properties);
        args.prototypical_common_properties_factory = updated_common_properties;

       
        args.children = Some(RefCell::new(self.build_children(containing_component_type_id, node_id)));
        args.template_node_identifier = Some(UniqueTemplateNodeIdentifier::build(containing_component_type_id.clone(), node_id.clone()));

        node_component_factory.build_component(args)
    }


    pub fn get_template_node_by_id(&self, id: &str) -> Option<Rc<dyn InstanceNode>> {
        let manifest = self.get_manifest();
        let main_component_type_id = manifest.main_component_type_id.clone();
        let main_component = manifest.components.get(&main_component_type_id).unwrap();
        let template = main_component.template.as_ref().unwrap();
        for node_id in template.get_ids() {
            if let Some(found) = self.recurse_get_template_node_by_id(id, &main_component_type_id, node_id) {
                return Some(self.build_template_node(&found.0, &found.1))
            }
        }
        None
    }

    fn check_for_id_in_template_node(&self, id: &str, tnd: &TemplateNodeDefinition) -> bool {
        if let Some(settings) = &tnd.settings {
            for setting in settings {
                if let SettingElement::Setting(token, value) = setting {
                    if &token.raw_value == "id" {
                        if let ValueDefinition::LiteralValue(lv) = value {
                            if lv.raw_value == id {
                                return true;
                            }
                        }
                    
                    }
                }
            }
        }
        false
    }

    fn recurse_get_template_node_by_id<'a>(&'a self, id: &str, containing_component_type_id: &'a TypeId, node_id: &'a TemplateNodeId) -> Option<(TypeId, TemplateNodeId)>{
        let manifest = self.get_manifest();
        let containing_component = manifest.components.get(containing_component_type_id).unwrap();
        let containing_template = containing_component.template.as_ref().unwrap();
        let tnd = containing_template.get_node(node_id).unwrap();

        if self.check_for_id_in_template_node(id, tnd) {
            return Some((containing_component_type_id.clone(), node_id.clone()));
        }

        if let Some(component) = &manifest.components.get(&tnd.type_id){
            if let Some(template) = &component.template {
                for node_id in template.get_ids() {
                    if let Some(found) = self.recurse_get_template_node_by_id(id, &tnd.type_id, node_id) {
                        return Some(found.clone());
                    }
                }
            }
        }
        None
    }
}
