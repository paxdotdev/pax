{%- macro render_component_factory(component, engine_import_path) %}
struct {{component.pascal_identifier}}Factory{}

impl {{ engine_import_path }}::pax_runtime::ComponentFactory for {{component.pascal_identifier}}Factory {

    fn build_default_properties(&self) -> Box<dyn Fn(std::rc::Rc<{{ engine_import_path }}::pax_runtime::RuntimePropertiesStackFrame>, Option<std::rc::Rc<crate::pax_runtime::ExpandedNode>>) -> Option<std::rc::Rc<RefCell<{{ engine_import_path }}::api::pax_value::PaxAny>>>> {
        Box::new(|_,_| Some(std::rc::Rc::new(RefCell::new({{component.type_id.import_path}}::default().to_pax_any()))))
    }

    fn build_inline_properties(&self, defined_properties: std::collections::BTreeMap<String,{{ engine_import_path }}::pax_manifest::ValueDefinition>) -> Box<dyn Fn(std::rc::Rc<{{ engine_import_path }}::pax_runtime::RuntimePropertiesStackFrame>, Option<std::rc::Rc<crate::pax_runtime::ExpandedNode>>) -> Option<std::rc::Rc<RefCell<{{ engine_import_path }}::api::pax_value::PaxAny>>>> {

        Box::new(move |stack_frame, expanded_node | {
            if let Some(expanded_node) = &expanded_node {
                use std::borrow::Borrow;
                let expanded_node = pax_message::borrow!(**expanded_node);
                let outer_ref = pax_message::borrow!(expanded_node.properties);
                let rc = std::rc::Rc::clone(&outer_ref);
                let mut inner_ref = (*rc).borrow_mut();
                let mut properties  = {{component.type_id.import_path}}::mut_from_pax_any(&mut inner_ref).unwrap();
                {% for property in component.properties %}
                if let Some(vd) = defined_properties.get("{{property.name}}") {
                        match vd.clone() {
                            {{ engine_import_path }}::pax_manifest::ValueDefinition::LiteralValue(lv) => {
                                let value = <{{property.property_type.type_id._type_id}}>::try_coerce(lv.clone()).unwrap_or_else(|err| {
                                    log::warn!("Failed to coerce new value for property. Error: {:?}", err);
                                    Default::default()
                                });
                                properties.{{property.name}}.replace_with(Property::new_with_name(value, "{{property.name}}"));
                            },
                            {{ engine_import_path }}::pax_manifest::ValueDefinition::DoubleBinding(identifier) => {
                                let identifier = identifier.name;
                                let untyped_property = stack_frame.resolve_symbol_as_erased_property(&identifier).expect(&format!("failed to resolve identifier: {}", &identifier));
                                properties.{{property.name}} = Property::new_from_untyped(untyped_property.clone());
                            },
                            {{ engine_import_path }}::pax_manifest::ValueDefinition::Identifier(ident)  => {
                                if let Some(variable) = stack_frame.resolve_symbol_as_variable(&ident.name) {
                                    let name = ident.name.clone();
                                    let untyped = variable.get_untyped_property().clone();
                                    let cloned_variable = variable.clone();
                                    properties.{{property.name}} = Property::computed_with_name(
                                        move || {
                                            let new_value = cloned_variable.get_as_pax_value();
                                            <{{property.property_type.type_id._type_id}}>::try_coerce(new_value)
                                                .unwrap_or_else(|err| {
                                                    log::warn!("Failed to coerce new value for property. Error: {:?}", err);
                                                    Default::default()
                                                })
                                        },
                                        &[untyped],
                                        &name,
                                    );
                                } else {
                                    log::warn!("Failed to resolve symbol {}", ident.name);
                                };

                            }
                            
                            {{ engine_import_path }}::pax_manifest::ValueDefinition::Expression(info) =>
                            {
                                let mut dependents = vec![];
                                for dependency in &info.dependencies {
                                    if let Some(p) = stack_frame.resolve_symbol_as_erased_property(dependency) {
                                        dependents.push(p);
                                    } else {
                                        log::warn!("Failed to resolve symbol {}", dependency);
                                    }
                                }
                                let cloned_stack = stack_frame.clone();
                                let cloned_ast = info.expression.clone();
                                properties.{{property.name}} = Property::computed_with_name(
                                    move || {
                                        let new_value = cloned_ast
                                                    .compute(cloned_stack.clone())
                                                    .unwrap_or_else(|err| {
                                                        log::warn!("Failed to compute expr: {}", info.expression);
                                                        Default::default()
                                                    });
                                        let coerced = <{{property.property_type.type_id._type_id}}>::try_coerce(new_value.clone())
                                            .unwrap_or_else(|err| {
                                                log::warn!("Failed to coerce new value for property. Error: {:?}", err);
                                                Default::default()
                                            });

                                        coerced
                                    },
                                    &dependents,
                                    "{{property.name}}",
                                );
                            },
                            {{ engine_import_path }}::pax_manifest::ValueDefinition::Block(block) => {
                                let cloned_stack = stack_frame.clone();
                                properties.{{property.name}}.replace_with({{property.property_type.type_id._type_id_escaped}}TypeFactory{}.build_type(&block, cloned_stack.clone()));
                            }
                            _ => unreachable!("Invalid value definition for {{property.name}}")
                        }
                }
            {% endfor %}
                None
            } else {
                let mut properties = {{component.type_id.import_path}}::default();
                {% for property in component.properties %}
                    if let Some(vd) = defined_properties.get("{{property.name}}") {
                            match vd.clone() {
                                {{ engine_import_path }}::pax_manifest::ValueDefinition::LiteralValue(lv) => {
                                    let value = <{{property.property_type.type_id._type_id}}>::try_coerce(lv.clone()).unwrap();
                                    properties.{{property.name}}.replace_with(Property::new_with_name(value, "{{property.name}}"));
                                },
                                {{ engine_import_path }}::pax_manifest::ValueDefinition::DoubleBinding(identifier) => {
                                    let identifier = identifier.name;
                                    let untyped_property = stack_frame.resolve_symbol_as_erased_property(&identifier).expect(&format!("failed to resolve identifier: {}", &identifier));
                                    properties.{{property.name}} = Property::new_from_untyped(untyped_property.clone());
                                },
                                {{ engine_import_path }}::pax_manifest::ValueDefinition::Identifier(ident)  => {
                                    if let Some(variable) = stack_frame.resolve_symbol_as_variable(&ident.name) {
                                        let name = ident.name.clone();
                                        let untyped = variable.get_untyped_property().clone();
                                        let cloned_variable = variable.clone();
                                        properties.{{property.name}} = Property::computed_with_name(
                                            move || {
                                                let new_value = cloned_variable.get_as_pax_value();
                                                <{{property.property_type.type_id._type_id}}>::try_coerce(new_value).unwrap_or_else(|err| {
                                                    log::warn!("Failed to coerce new value for property. Error: {:?}", err);
                                                    Default::default()
                                                })
                                            },
                                            &[untyped],
                                            &name,
                                        );
                                        } else {
                                            log::warn!("Failed to resolve symbol {}", ident.name);
                                        };
                                }
                                
                                {{ engine_import_path }}::pax_manifest::ValueDefinition::Expression(info) =>
                                {
                                    let mut dependents = vec![];
                                    for dependency in &info.dependencies {
                                        if let Some(p) = stack_frame.resolve_symbol_as_erased_property(dependency) {
                                            dependents.push(p);
                                        } else {
                                            log::warn!("Failed to resolve symbol {}", dependency);
                                        }
                                    }
                                    let cloned_stack = stack_frame.clone();
                                    let cloned_ast = info.expression.clone();
                                    properties.{{property.name}} = Property::computed_with_name(
                                        move || {
                                            let new_value = cloned_ast
                                                    .compute(cloned_stack.clone())
                                                    .unwrap_or_else(|err| {
                                                        log::warn!("Failed to compute expr: {}", info.expression);
                                                        Default::default()
                                                    });
                                            let coerced = <{{property.property_type.type_id._type_id}}>::try_coerce(new_value.clone()).unwrap_or_else(|err| {
                                                log::warn!("Failed to coerce new value for property. Error: {:?}", err);
                                                Default::default()
                                            });
                                            coerced
                                        },
                                        &dependents,
                                        "{{property.name}}",
                                    );
                                },
                                {{ engine_import_path }}::pax_manifest::ValueDefinition::Block(block) => {
                                    let cloned_stack = stack_frame.clone();
                                    properties.{{property.name}}.replace_with({{property.property_type.type_id._type_id_escaped}}TypeFactory{}.build_type(&block, cloned_stack.clone()));
                                }
                                _ => unreachable!("Invalid value definition for {{property.name}}")
                            }
                    }
                {% endfor %}
            Some(std::rc::Rc::new(RefCell::new(properties.to_pax_any())))
            }
        }
        )
    }

    fn build_handler(&self,fn_name: &str) -> fn(std::rc::Rc<RefCell<{{ engine_import_path }}::api::pax_value::PaxAny>>, &NodeContext, Option::<{{ engine_import_path }}::api::pax_value::PaxAny>) {
        match fn_name {
            {% for handler in component.handlers %}
            "{{handler.name}}" => {
                |properties, ctx, args|{
                    let properties = &mut *borrow_mut!(properties.as_ref());
                    if let Ok(mut properties) = <{{component.type_id.import_path}}>::mut_from_pax_any(properties) {
                        // downcast args to handler.type
                        {% if handler.args_type %}
                            if let Some(args) = args {
                                if let Ok(args) = <{{handler.args_type}}>::ref_from_pax_any(&args) {
                                    {{component.type_id.import_path}}::{{handler.name}}(properties,ctx, args.clone());
                                } else {panic!("Failed to downcast args to {{handler.args_type}}")};
                            } else {
                                panic!("No {{handler.args_type}} present");
                            }
                        {% else %}
                            if let None = args {
                                {{component.type_id.import_path}}::{{handler.name}}(properties,ctx);
                            } else {
                                panic!("Unexpected args present");
                            }
                        {% endif %}
                        
                    } else {panic!("Failed to downcast properties to {{component.type_id.import_path}}")};
                }
            },
            {% endfor %}
            _ => {
                log::warn!("Unknown handler name {}", fn_name);
                |_,_,_|{}
            }
        }
    }

    fn build_component_handlers(&self, handlers: Vec<(String, Vec<String>)>) -> std::rc::Rc<RefCell<{{ engine_import_path }}::pax_runtime::HandlerRegistry>> {
        let mut handler_registry = {{ engine_import_path }}::pax_runtime::HandlerRegistry::default();
        for (event, functions) in &handlers {
            handler_registry.handlers.insert(event.clone(), functions.iter().map(|fn_name| {
                {{ engine_import_path }}::pax_runtime::Handler::new_component_handler(self.build_handler(&fn_name))
            }).collect());
        } 
        std::rc::Rc::new(RefCell::new(handler_registry))
    }

    fn add_inline_handlers(&self, handlers: Vec<(String, String)>, handler_registry: std::rc::Rc<RefCell<{{ engine_import_path }}::pax_runtime::HandlerRegistry>>) -> std::rc::Rc<RefCell<{{ engine_import_path }}::pax_runtime::HandlerRegistry>> {
        {
            let mut handler_registry_mut = borrow_mut!(handler_registry);
            for (event, fn_name) in &handlers {
                let handler_vec = handler_registry_mut.handlers.entry(event.clone()).or_insert(Vec::new());
                handler_vec.push({{ engine_import_path }}::pax_runtime::Handler::new_inline_handler(self.build_handler(&fn_name)));
            } 
        }   
        handler_registry
    }

    fn build_component(&self, args: {{ engine_import_path }}::rendering::InstantiationArgs) -> std::rc::Rc<dyn InstanceNode> {
        {% if component.primitive_instance_import_path%}
        {{component.primitive_instance_import_path}}::instantiate(args)
        {% else %}
        {{ engine_import_path }}::pax_runtime::ComponentInstance::instantiate(args)
        {% endif %}    
    }

    fn get_properties_scope_factory(&self) -> Box<dyn Fn(std::rc::Rc<RefCell<{{ engine_import_path }}::api::pax_value::PaxAny>>) -> std::collections::HashMap<String, {{ engine_import_path }}::api::Variable>>  {
        Box::new(|props| {
            let properties = &mut *borrow_mut!(props.as_ref());
            if let Ok(properties) = <{{component.type_id.import_path}}>::mut_from_pax_any(properties) {
                let mut scope = std::collections::HashMap::new();
                {% for prop in component.properties %}
                    scope.insert("{{prop.name}}".to_string(), {{ engine_import_path }}::api::Variable::new::<{{prop.property_type.type_id._type_id}}>(properties.{{prop.name}}.untyped()));
                {% endfor %}
                scope
            } else {
                panic!("Failed to downcast properties to {{component.type_id.import_path}}");
            }
        })
    }

}
{%- endmacro -%}

{%- macro render_type_factory(type_table, active_type, engine_import_path) %}
#[allow(non_camel_case_types)]
struct {{active_type.type_id._type_id_escaped}}TypeFactory{}

impl TypeFactory for {{active_type.type_id._type_id_escaped}}TypeFactory {

    type Output=Property<{{active_type.type_id._type_id}}>;

    fn build_type(&self, args: &{{ engine_import_path }}::pax_manifest::LiteralBlockDefinition, stack_frame: std::rc::Rc<{{ engine_import_path }}::pax_runtime::RuntimePropertiesStackFrame>) -> Self::Output {
        let mut properties: {{active_type.type_id._type_id}} = Default::default();
        let mut deps = vec![];
        for setting in &args.elements {
            if let {{ engine_import_path }}::pax_manifest::SettingElement::Setting(k, vd) = setting {
                match k.token_value.as_str() {
                    {% for prop in active_type.property_definitions %}
                    "{{prop.name}}" => {
                        {% if not prop.flags._is_enum %}
                            properties.{{prop.name}} = 
                            {% if prop.flags.is_property_wrapped %}
                                match vd {
                                    {{ engine_import_path }}::pax_manifest::ValueDefinition::LiteralValue(lv) => {
                                        let value = <{{prop.type_id._type_id}}>::try_coerce(lv.clone()).unwrap_or_else(|err| {
                                            log::warn!("Failed to coerce new value for property. Error: {:?}", err);
                                            Default::default()
                                        });
                                        Property::new_with_name(value, "{{prop.name}}")
                                    },
                                    {{ engine_import_path }}::pax_manifest::ValueDefinition::DoubleBinding(identifier) => {
                                        let identifier = identifier.name.clone();
                                        let untyped_property = stack_frame.resolve_symbol_as_erased_property(&identifier).expect(&format!("failed to resolve identifier: {}", &identifier));
                                        let ret = Property::new_from_untyped(untyped_property.clone());
                                        deps.push(ret.untyped());
                                        ret
                                    },
                                    {{ engine_import_path }}::pax_manifest::ValueDefinition::Identifier(ident)  => {
                                        if let Some(variable) = stack_frame.resolve_symbol_as_variable(&ident.name) {
                                            let name = ident.name.clone();
                                            let untyped = variable.get_untyped_property().clone();
                                            let cloned_variable = variable.clone();
                                            let ret = Property::computed_with_name(
                                                move || {
                                                    let new_value = cloned_variable.get_as_pax_value();
                                                    <{{prop.type_id._type_id}}>::try_coerce(new_value).unwrap_or_else(|err| {
                                                        log::warn!("Failed to coerce new value for property. Error: {:?}", err);
                                                        Default::default()
                                                    })
                                                },
                                                &[untyped],
                                                &name,
                                            );
                                            deps.push(ret.untyped());
                                            ret
                                        } else {
                                            log::warn!("Failed to resolve symbol {}", ident.name);
                                            Default::default()
                                        }
                                       
                                    }
                                    {{ engine_import_path }}::pax_manifest::ValueDefinition::Expression(info) =>
                                    {
                                        let mut dependents = vec![];
                                        for dependency in &info.dependencies {
                                            if let Some(p) = stack_frame.resolve_symbol_as_erased_property(dependency) {
                                                dependents.push(p);
                                            } else {
                                                log::warn!("Failed to resolve symbol {}", dependency);
                                            }
                                        }
                                        let cloned_stack = stack_frame.clone();
                                        let cloned_ast = info.expression.clone();
                                        let ret = Property::computed_with_name(
                                            move || {
                                                let new_value = cloned_ast
                                                    .compute(cloned_stack.clone())
                                                    .unwrap_or_else(|err| {
                                                        log::warn!("Failed to compute expr: {}", cloned_ast);
                                                        Default::default()
                                                    });
                                                let coerced = <{{prop.type_id._type_id}}>::try_coerce(new_value.clone()).unwrap_or_else(|err| {
                                                    log::warn!("Failed to coerce new value for property. Error: {:?}", err);
                                                    Default::default()
                                                });
                                                coerced
                                            },
                                            &dependents,
                                            "{{prop.name}}",
                                        );
                                        deps.push(ret.untyped());
                                        ret
                                    },
                                    {{ engine_import_path }}::pax_manifest::ValueDefinition::Block(block) => {
                                        let ret = {{prop.type_id._type_id_escaped}}TypeFactory{}.build_type(&block, stack_frame.clone());
                                        deps.push(ret.untyped());
                                        ret
                                    }
                                    _ => unreachable!("Invalid value definition for {{prop.name}}")
                                };
                            {% else %}
                                match vd {
                                    {{ engine_import_path }}::pax_manifest::ValueDefinition::LiteralValue(lv) => {
                                        <{{prop.type_id._type_id}}>::try_coerce(lv.clone()).unwrap_or_else(|err| {
                                            log::warn!("Failed to coerce new value for property. Error: {:?}", err);
                                            Default::default()
                                        })
                                    },
                                    _ => unreachable!("Invalid value definition for {{prop.name}}")
                                };
                            {% endif %}
                        {% endif %}
                    },
                    {% endfor %}
                    _ => panic!("Unknown property name {}", k.token_value)
                }
            
            }
        }
        Property::computed_with_name(
            move || {
                let cloned_prop = properties.clone();
                {%- for prop in active_type.property_definitions -%}
                    {%- if prop.flags.is_property_wrapped %}
                    cloned_prop.{{prop.name}}.get();
                    {%- endif -%}
                {%- endfor %}
                cloned_prop
            },
            &deps,
            "computed"
        )
    }
}

{%- endmacro -%}
