{%- macro render_component_factory(component) %}
struct {{component.pascal_identifier}}Factory{}

impl ComponentFactory for {{component.pascal_identifier}}Factory {

    fn build_default_properties(&self) -> Box<dyn Fn() -> Rc<RefCell<dyn Any>>> {
        Box::new(|| Rc::new(RefCell::new({{component.pascal_identifier}}::default())))
    }

    fn build_inline_properties(&self, defined_properties: &HashMap<String,ValueDefinition>) -> Box<dyn Fn() -> Rc<RefCell<dyn Any>>> {
        let mut properties = {{component.pascal_identifier}}::default();
        {% for property in component.properties %}
            if let Some(vd) = defined_properties.get("{{property.name}}") {
                properties.{{property.name}} =
                    match vd.clone() {
                        ValueDefinition::LiteralValue(lv) => {
                            Box::new(PropertyLiteral::new(from_pax(lv.raw_value).unwrap()))
                        },
                        ValueDefinition::Expression(token, id) | ValueDefinition::Identifier(token,id) =>
                        {
                            Box::new(PropertyExpression::new(id.expect("Tried to use expression but it wasn't compiled")))
                        },
                        ValueDefinition::Block(block) => {
                            Box::new(PropertyLiteral::new({{property.property_type.type_id_escaped}}TypeFactory{}.build_type(&block)))
                        }
                        _ => unreachable!("Invalid value definition for {{property.name}}")
                    };
            }
        {% endfor %}
        Box::new(move || Rc::new(RefCell::new(
        {
            properties.clone()
        })))
    }

    fn build_handler(&self,fn_name: &str) -> fn(Rc<RefCell<dyn Any>>, &EngineContext, Option::<Box<dyn Any>>) {
        match fn_name {
            {% for handler in component.handlers %}
            "{{handler.name}}" => {
                |properties, ctx, args|{
                    let properties = &mut *properties.as_ref().borrow_mut();
                    if let Some(mut properties) = properties.downcast_mut::<{{component.pascal_identifier}}>() {
                        // downcast args to handler.type
                        {% if handler.args_type %}
                            if let Some(args) = args {
                                if let Some(args) = args.downcast_ref::<{{handler.args_type}}>() {
                                    {{component.pascal_identifier}}::{{handler.name}}(properties,ctx, args.clone());
                                } else {panic!("Failed to downcast args to {{handler.args_type}}")};
                            } else {
                                panic!("No {{handler.args_type}} present");
                            }
                        {% else %}
                            if let None = args {
                                {{component.pascal_identifier}}::{{handler.name}}(properties,ctx);
                            } else {
                                panic!("Unexpected args present");
                            }
                        {% endif %}
                        
                    } else {panic!("Failed to downcast properties to {{component.pascal_identifier}}")};
                }
            },
            {% endfor %}
            _ => panic!("Unknown handler name {}", fn_name)
        }
    }

    fn build_component_handlers(&self, handlers: Vec<(String, Vec<String>)>) -> Rc<RefCell<HandlerRegistry>> {
        let mut handler_registry = HandlerRegistry::default();
        for (event, functions) in &handlers {
            handler_registry.handlers.insert(event.clone(), functions.iter().map(|fn_name| self.build_handler(&fn_name)).collect());
        } 
        Rc::new(RefCell::new(handler_registry))
    }

    fn add_inline_handlers(&self, handlers: Vec<(String, String)>, handler_registry: Rc<RefCell<HandlerRegistry>>) -> Rc<RefCell<HandlerRegistry>> {
        {
            let mut handler_registry_mut = handler_registry.borrow_mut();
            for (event, fn_name) in &handlers {
                let handler_vec = handler_registry_mut.handlers.entry(event.clone()).or_insert(Vec::new());
                handler_vec.push(self.build_handler(&fn_name));
            } 
        }   
        handler_registry
    }

    fn build_compute_properties_fn(&self) -> Option<Box<dyn Fn(&ExpandedNode, &ExpressionTable, &Globals)>> {
        Some(Box::new(|node, table, globals|{
            let props = &node.properties;
            let properties = &mut props.as_ref().borrow_mut();

            if let Some(properties) = properties.downcast_mut::<{{component.pascal_identifier}}>() {

                {% for prop in component.properties %}
                    if let Some(new_value) = table.compute_eased_value(properties.{{prop.name}}._get_transition_manager(), globals) {
                        properties.{{ prop.name }}.set(new_value);
                    } else if let Some(vtable_id) = properties.{{ prop.name }}._get_vtable_id() {
                        let new_value_wrapped = table.compute_vtable_value(&node.stack, vtable_id);
                        if let Ok(new_value) = new_value_wrapped.downcast::<{{prop.property_type.type_id}}>() {
                            properties.{{ prop.name }}.set(*new_value);
                        } else {
                            panic!(
                                "generated code tried to downcast to incompatible type \"{{prop.property_type.type_id}}\" for property \"{{prop.name}}\" on {{component.pascal_identifier}}"
                            );
                        }
                    }
                {% endfor %}

            } else {
                panic!("Failed to downcast properties to {{component.pascal_identifier}}");
            }
        }))
    }

    fn build_component(&self, args: InstantiationArgs) -> Rc<dyn InstanceNode> {
        {% if component.primitive_instance_import_path%}
        {{component.primitive_instance_import_path}}::instantiate(args)
        {% else %}
        ComponentInstance::instantiate(args)
        {% endif %}    
    }
}
{%- endmacro -%}

{%- macro render_type_factory(type_table, active_type) %}
#[allow(non_camel_case_types)]
struct {{active_type.type_id_escaped}}TypeFactory{}

impl TypeFactory for {{active_type.type_id_escaped}}TypeFactory {

    type Output={{active_type.type_id}};

    fn build_type(&self, args: &LiteralBlockDefinition) -> Self::Output {
        let mut properties: {{active_type.type_id}} = Default::default();
        for setting in &args.elements {
            if let SettingElement::Setting(k, vd) = setting {
                match k.raw_value.as_str() {
                    {% for prop in active_type.property_definitions %}
                    "{{prop.name}}" => {
                        {% if not prop.flags.is_enum %}
                            properties.{{prop.name}} = 
                            {% if prop.flags.is_property_wrapped %}
                                match vd {
                                    ValueDefinition::LiteralValue(lv) => {
                                        if let Err(e) = from_pax::<{{prop.type_id}}>(lv.raw_value.clone()) {
                                            panic!("Failed to parse value for {} with error {}",lv.raw_value.clone(),e);
                                        }
                                        Box::new(PropertyLiteral::new(from_pax(lv.raw_value.clone()).unwrap()))
                                    },
                                    ValueDefinition::Expression(token, id) | ValueDefinition::Identifier(token,id) =>
                                    {
                                        Box::new(PropertyExpression::new(id.expect("Tried to use expression but it wasn't compiled")))
                                    },
                                    ValueDefinition::Block(block) => {
                                        Box::new(PropertyLiteral::new({{prop.type_id_escaped}}TypeFactory{}.build_type(&block)))
                                    }
                                    _ => unreachable!("Invalid value definition for {{prop.name}}")
                                };
                            {% else %}
                                match vd {
                                    ValueDefinition::LiteralValue(lv) => {
                                        from_pax(lv.raw_value.clone()).unwrap()
                                    },
                                    ValueDefinition::Block(block) => {
                                        {{prop.type_id_escaped}}TypeFactory{}.build_type(args)
                                    }
                                    _ => unreachable!("Invalid value definition for {{prop.name}}")
                                };
                            {% endif %}
                        {% endif %}
                    },
                    {% endfor %}
                    _ => panic!("Unknown property name {}", k.raw_value)
                }
            
            }
        }
        properties
    }
}

{%- endmacro -%}
